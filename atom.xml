<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kenneth</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kennethhutw.github.io/"/>
  <updated>2016-10-06T09:12:47.178Z</updated>
  <id>https://kennethhutw.github.io/</id>
  
  <author>
    <name>Kenneth_hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Knockout-js-todo-list-sortable</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable/</id>
    <published>2016-10-05T12:19:57.000Z</published>
    <updated>2016-10-06T09:12:47.178Z</updated>
    
    <content type="html">&lt;p&gt;#Knockout-js-todolist#&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/Knockout_todo.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Github Repo of Multiple Sortable Todos using Knockout-js.&lt;/p&gt;
&lt;p&gt;#Tutorial#&lt;/p&gt;
&lt;p&gt;##简体中文版本##&lt;br&gt;&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##繁體中文版本##&lt;br&gt;&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##English version##&lt;br&gt;&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#Contact#&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kennethhu.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Website&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;mailto:Kenneth.hu@hotmail.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;My Email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#LICENSE&lt;/p&gt;
&lt;p&gt;MIT&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#Knockout-js-todolist#&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image/Knockout_todo.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The Github Repo of Multiple Sortable Todos usi
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>Knockout-js-todo-list-sortable-cn-2</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-2/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-2/</id>
    <published>2016-10-05T11:25:01.726Z</published>
    <updated>2016-10-06T09:02:54.825Z</updated>
    
    <content type="html">&lt;p&gt;在此课程，将要做搜寻、筛选还有排序的功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Step1-–-Sort-function&quot;&gt;&lt;a href=&quot;#Step1-–-Sort-function&quot; class=&quot;headerlink&quot; title=&quot;Step1 – Sort function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – Sort function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这步骤将要用户可以重新排序待办事项，这裡我使用一个套件&lt;a href=&quot;https://github.com/rniemeyer/knockout-sortable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;knockout-sortable.js&lt;/a&gt;，可以很轻易地完成这个功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在待办事项控件裡，绑定sortable: {data: todos()} 就完成了，当然别忘了要引用套件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;  &amp;gt;
    &amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;sortable: {data: todos()}&amp;quot;&amp;gt;
        &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
                &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
                &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; plugin in index.html : &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/knockout-sortable.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Search-and-Filter-function&quot;&gt;&lt;a href=&quot;#Step2-–-Search-and-Filter-function&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Search and Filter function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Search and Filter function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_2_1.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这步骤将要建立一个搜寻功能并有一个快速筛选出完成项目与未完成项目功能，在此功能也引用另一个套件router。&lt;br&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt; 引用套件: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/director.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; 搜寻与筛选控件: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&amp;quot;row&amp;quot; data-bind=&amp;quot;visible: completedCount() || remainingCount()&amp;quot; style=&amp;quot;   margin-top: 8px;&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col-xs-5&amp;quot; style=&amp;quot;padding-left: 0px;&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
                &amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                &amp;lt;button class=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
            &amp;lt;/span&amp;gt;
            &amp;lt;input type=&amp;quot;search&amp;quot; class=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Search&amp;quot;  data-bind=&amp;quot;textInput: query&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;col-xs-3 &amp;quot;&amp;gt;
        &amp;lt;ul class=&amp;quot;nav nav-pills&amp;quot; id=&amp;quot;filters&amp;quot;&amp;gt;
            &amp;lt;li data-bind=&amp;quot;css: { active: isActive(&amp;apos;all&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;all&amp;apos; }&amp;quot; href=&amp;quot;#/all&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li  data-bind=&amp;quot;css: { active: isActive(&amp;apos;active&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;active&amp;apos; }&amp;quot; href=&amp;quot;#/active&amp;quot;&amp;gt;Active&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li  data-bind=&amp;quot;css: { active: isActive(&amp;apos;completed&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;completed&amp;apos; }&amp;quot; href=&amp;quot;#/completed&amp;quot;&amp;gt;Completed&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-xs-2&amp;quot; style=&amp;quot;   margin-top: 8px;&amp;quot;&amp;gt;
        &amp;lt;span id=&amp;quot;todo-count&amp;quot;&amp;gt;
            &amp;lt;strong data-bind=&amp;quot;text: remainingCount&amp;quot;&amp;gt;0&amp;lt;/strong&amp;gt;
            &amp;lt;span data-bind=&amp;quot;text: getLabel(remainingCount)&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; left
        &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; 待办事件控件: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在待办事项控件裡，我利用css的属性来完成搜寻与筛选功能，用$root.filteredTodos($data)来确认是否符合条件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;  &amp;gt;
    &amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;sortable: {data: todos()}&amp;quot;&amp;gt;
        &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing },visible: $root.filteredTodos($data)&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
                &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
                &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在filteredTodos funciton中，有两阶段，第一阶段执行筛选而第二阶段执行搜寻功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.filteredTodos = function(todo) {
    var result = true;
        switch(this.showMode()){
      case &amp;apos;active&amp;apos;:
        if(todo.completed() != false)
            result = false;
        break;
        case &amp;apos;completed&amp;apos;:
         if(todo.completed() != true)
             result = false
       break;
        }
    if(result){
        var filter = this.query().toLowerCase();
        if(!filter){
            return true;
        }
        else{
          return todo.title().toLowerCase().indexOf(filter) !== -1;
        }
    }else
    {
        return false;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在搜寻与筛选功能裡，我不用功能方式来执行，我採用路径(URL)方式来执行，在app.js裡加了以下的代码，来取得筛选的条件，也是前面提到的Router套件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Router({&amp;apos;/:filter&amp;apos;: viewModel.showMode}).init();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你完成，你可以看到 TodoApp.  PS: 我在完整桉例裡有加一些功能，让您们可研究一下。&lt;br&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在此课程，将要做搜寻、筛选还有排序的功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>Knockout-js-todo-list-sortable-tw-2</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-2/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-2/</id>
    <published>2016-10-05T11:24:49.000Z</published>
    <updated>2016-10-06T09:03:46.506Z</updated>
    
    <content type="html">&lt;p&gt;在此課程，將要做搜尋、篩選還有排序的功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Step1-–-Sort-function&quot;&gt;&lt;a href=&quot;#Step1-–-Sort-function&quot; class=&quot;headerlink&quot; title=&quot;Step1 – Sort function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – Sort function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;這步驟將要用戶可以重新排序待辦事項，這裡我使用一個套件&lt;a href=&quot;https://github.com/rniemeyer/knockout-sortable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;knockout-sortable.js&lt;/a&gt;，可以很輕易地完成這個功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在待辦事項控件裡，綁定sortable: {data: todos()} 就完成了，當然別忘了要引用套件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;  &amp;gt;
    &amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;sortable: {data: todos()}&amp;quot;&amp;gt;
        &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
                &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
                &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; plugin in index.html : &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/knockout-sortable.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Search-and-Filter-function&quot;&gt;&lt;a href=&quot;#Step2-–-Search-and-Filter-function&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Search and Filter function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Search and Filter function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_2_1.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這步驟將要建立一個搜尋功能並有一個快速篩選出完成項目與未完成項目功能，在此功能也引用另一個套件router。&lt;br&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt; 引用套件: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/director.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; 搜尋與篩選控件: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&amp;quot;row&amp;quot; data-bind=&amp;quot;visible: completedCount() || remainingCount()&amp;quot; style=&amp;quot;   margin-top: 8px;&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col-xs-5&amp;quot; style=&amp;quot;padding-left: 0px;&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
                &amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                &amp;lt;button class=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                &amp;lt;/span&amp;gt;
                &amp;lt;input type=&amp;quot;search&amp;quot; class=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Search&amp;quot;  data-bind=&amp;quot;textInput: query&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;col-xs-3 &amp;quot;&amp;gt;
        &amp;lt;ul class=&amp;quot;nav nav-pills&amp;quot; id=&amp;quot;filters&amp;quot;&amp;gt;
            &amp;lt;li data-bind=&amp;quot;css: { active: isActive(&amp;apos;all&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;all&amp;apos; }&amp;quot; href=&amp;quot;#/all&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li  data-bind=&amp;quot;css: { active: isActive(&amp;apos;active&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;active&amp;apos; }&amp;quot; href=&amp;quot;#/active&amp;quot;&amp;gt;Active&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li  data-bind=&amp;quot;css: { active: isActive(&amp;apos;completed&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;completed&amp;apos; }&amp;quot; href=&amp;quot;#/completed&amp;quot;&amp;gt;Completed&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-xs-2&amp;quot; style=&amp;quot;   margin-top: 8px;&amp;quot;&amp;gt;
        &amp;lt;span id=&amp;quot;todo-count&amp;quot;&amp;gt;
            &amp;lt;strong data-bind=&amp;quot;text: remainingCount&amp;quot;&amp;gt;0&amp;lt;/strong&amp;gt;
            &amp;lt;span data-bind=&amp;quot;text: getLabel(remainingCount)&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; left
        &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; 待辦事件控件: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在待辦事項控件裡，我利用css的屬性來完成搜尋與篩選功能，用$root.filteredTodos($data)來確認是否符合條件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;  &amp;gt;
    &amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;sortable: {data: todos()}&amp;quot;&amp;gt;
        &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing },visible: $root.filteredTodos($data)&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
                &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
                &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在filteredTodos funciton中，有兩階段，第一階段執行篩選而第二階段執行搜尋功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.filteredTodos = function(todo) {
    var result = true;
        switch(this.showMode()){
      case &amp;apos;active&amp;apos;:
        if(todo.completed() != false)
            result = false;
        break;
        case &amp;apos;completed&amp;apos;:
         if(todo.completed() != true)
             result = false
       break;
        }
    if(result){
        var filter = this.query().toLowerCase();
        if(!filter){
            return true;
        }
        else{
          return todo.title().toLowerCase().indexOf(filter) !== -1;
        }
    }else
    {
        return false;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在搜尋與篩選功能裡，我不用功能方式來執行，我採用路徑(URL)方式來執行，在app.js裡加了以下的代碼，來取得篩選的條件，也是前面提到的Router套件。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Router({&amp;apos;/:filter&amp;apos;: viewModel.showMode}).init();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當你完成，你可以看到 TodoApp.  PS: 我在完整案例裡有加一些功能，讓您們可研究一下。&lt;br&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在此課程，將要做搜尋、篩選還有排序的功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>Knockout-js-todo-list-sortable-2</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-2/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-2/</id>
    <published>2016-10-05T11:24:39.000Z</published>
    <updated>2016-10-06T08:59:59.093Z</updated>
    
    <content type="html">&lt;p&gt;We are going to do the search filter and sorting function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Step1-–-Sort-function&quot;&gt;&lt;a href=&quot;#Step1-–-Sort-function&quot; class=&quot;headerlink&quot; title=&quot;Step1 – Sort function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – Sort function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We want to allow users can sort todo items. We are going to use &lt;a href=&quot;https://github.com/rniemeyer/knockout-sortable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;knockout-sortable.js&lt;/a&gt; plug-in. It help us to accomplish this function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is to bind “sortable: {data: todos()}” in ul element in to-do control. &lt;/p&gt;
&lt;p&gt;PS : don’t forget to include knockout-sortable plug-in in index.html. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;  &amp;gt;
    &amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;sortable: {data: todos()}&amp;quot;&amp;gt;
        &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
                &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
                &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; plugin in index.html : &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/knockout-sortable.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Search-and-Filter-function&quot;&gt;&lt;a href=&quot;#Step2-–-Search-and-Filter-function&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Search and Filter function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Search and Filter function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; Interface &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_2_1.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Search function: user can find to-do item by using key words&lt;br&gt;Filter function: It filtter to-do item by todo status(active and completed). We will use another plug-in - router.js so as to filter to-do items.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt; plugin in index.html : &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/director.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; Search &amp;amp; Sorting control: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;div class=&amp;quot;row&amp;quot; data-bind=&amp;quot;visible: completedCount() || remainingCount()&amp;quot; style=&amp;quot;   margin-top: 8px;&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col-xs-5&amp;quot; style=&amp;quot;padding-left: 0px;&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;input-group&amp;quot;&amp;gt;
                &amp;lt;span class=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                &amp;lt;button class=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
            &amp;lt;/span&amp;gt;
            &amp;lt;input type=&amp;quot;search&amp;quot; class=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Search&amp;quot;  data-bind=&amp;quot;textInput: query&amp;quot; autocomplete=&amp;quot;off&amp;quot;&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;col-xs-3 &amp;quot;&amp;gt;
        &amp;lt;ul class=&amp;quot;nav nav-pills&amp;quot; id=&amp;quot;filters&amp;quot;&amp;gt;
            &amp;lt;li data-bind=&amp;quot;css: { active: isActive(&amp;apos;all&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;all&amp;apos; }&amp;quot; href=&amp;quot;#/all&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li  data-bind=&amp;quot;css: { active: isActive(&amp;apos;active&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;active&amp;apos; }&amp;quot; href=&amp;quot;#/active&amp;quot;&amp;gt;Active&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li  data-bind=&amp;quot;css: { active: isActive(&amp;apos;completed&amp;apos;) }&amp;quot;&amp;gt;
                &amp;lt;a data-bind=&amp;quot;css: { selected: showMode() == &amp;apos;completed&amp;apos; }&amp;quot; href=&amp;quot;#/completed&amp;quot;&amp;gt;Completed&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;col-xs-2&amp;quot; style=&amp;quot;   margin-top: 8px;&amp;quot;&amp;gt;
        &amp;lt;span id=&amp;quot;todo-count&amp;quot;&amp;gt;
            &amp;lt;strong data-bind=&amp;quot;text: remainingCount&amp;quot;&amp;gt;0&amp;lt;/strong&amp;gt;
            &amp;lt;span data-bind=&amp;quot;text: getLabel(remainingCount)&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; left
        &amp;lt;/span&amp;gt;
    &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; To-do control: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I achieve search and filter function by css attribute. If to-do item does not meet condition, it will be hided. &lt;/p&gt;
&lt;p&gt;It is to bind $root.filteredTodos($data) in li element so as to check whether todo meet condition in filteredTodos function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;form-group&amp;quot;  &amp;gt;
    &amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;sortable: {data: todos()}&amp;quot;&amp;gt;
        &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing },visible: $root.filteredTodos($data)&amp;quot;&amp;gt;
            &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
                &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
                &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
                &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
        &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two steps in filteredTodos function.&lt;/p&gt;
&lt;p&gt;The first step is achieve the filter function. &lt;/p&gt;
&lt;p&gt;The Second step is achieve the search function. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.filteredTodos = function(todo) {
    var result = true;
        switch(this.showMode()){
      case &amp;apos;active&amp;apos;:
        if(todo.completed() != false)
            result = false;
        break;
        case &amp;apos;completed&amp;apos;:
         if(todo.completed() != true)
             result = false
       break;
        }
    if(result){
        var filter = this.query().toLowerCase();
        if(!filter){
            return true;
        }
        else{
          return todo.title().toLowerCase().indexOf(filter) !== -1;
        }
    }else
    {
        return false;
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this step, It is to get filter argument by URL(Router). &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Router({&amp;apos;/:filter&amp;apos;: viewModel.showMode}).init();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you finish , you can see the TodoApp as below .  &lt;/p&gt;
&lt;p&gt;PS: I have added some functions in demo. I hope you can study these but I will not explain how to made.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;We are going to do the search filter and sorting function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>Knockout-js-todo-list-sortable-1</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-1/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-1/</id>
    <published>2016-10-05T10:36:55.000Z</published>
    <updated>2016-10-06T09:02:20.623Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-Knockout-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-Knockout-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with Knockout.js&quot;&gt;&lt;/a&gt; Building a Todo app with Knockout.js&lt;/h1&gt;&lt;p&gt;This is my first attempt with Knockout-js to build a Todo App.&lt;br&gt;Knockout is a popular JavaScript library that simplifies the creation of complex data-based user interfaces. It can be used alone or with other libraries, such as jQuery. Its primary purpose is to bind UI elements to an underlying data model defined as a JavaScript object, such that when changes are made to the UI, the model is updated, and vice versa. Knockout facilitates the use of a Model-View-ViewModel (MVVM) pattern in a web application’s client-side behavior. The two main concepts one must learn when working with Knockout’s MVVM implementation are Observables and Bindings.&lt;/p&gt;
&lt;p&gt;Lets start.You can follow the steps from the github repo for this tutorial.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;If you are unfamiliar with this library, then I would strongly recommend reading the complete tutorial on &lt;a href=&quot;http://learn.knockoutjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Todo List ToDo application is to record the agency matters, saved it in local storage. User can add, modify, view, update, and delete todo items in application. &lt;/p&gt;
&lt;p&gt;According to the above described To-do applications have to know this basic CRUD (Create-Read-Update-Delete) function, but also can store to-do function.&lt;/p&gt;
&lt;p&gt;According to these requirement, I create to-do application with Knockout.js&lt;/p&gt;
&lt;h1 id=&quot;Step1-–-build-ViewModel&quot;&gt;&lt;a href=&quot;#Step1-–-build-ViewModel&quot; class=&quot;headerlink&quot; title=&quot;Step1 – build ViewModel &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – build ViewModel &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;The first step is create to-do object and then building ViewModel based on to-do object&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; Todo object &lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Todo = function(title, completed){
    this.title = ko.observable(title);               //To-do Title
    this.completed = ko.observable(completed);       //To-do status True: completed False: uncomplete
    this.editing = ko.observable(false);             //Edit staut True: can edit False: cannot edit 
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is to save to-do item in array&lt;br&gt;&lt;strong&gt;&lt;em&gt; ViewModel: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ViewModel = function(todos){
    this.todos = ko.observableArray(todos.map(function(todo){
    return new Todo(todo.title, todo.completed);
    }));
};
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step1-–-Add-function&quot;&gt;&lt;a href=&quot;#Step1-–-Add-function&quot; class=&quot;headerlink&quot; title=&quot;Step1 – Add function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – Add function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_1_1.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The “current” variable is bind to input elements :  The value binding links the associated DOM element’s value with a property on your view model. When the user edit form controls time, view model corresponding attribute value is automatically updated. Similarly, when you update the view model properties when the corresponding element values ​​are automatically updated on the page.&lt;br&gt;value binding has a main parameter (Value) and other parameters (valueUpdate)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;todoField&amp;quot; id=&amp;quot;new-todo&amp;quot; data-bind=&amp;quot;value: current, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: add&amp;quot; placeholder=&amp;quot;What needs to be done?&amp;quot; autofocus&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; valueUpdate &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your binding also includes a parameter called valueUpdate, this defines additional browser events KO should use to detect changes besides the change event. The following string values are the most commonly useful choices:&lt;/p&gt;
&lt;p&gt;“input” - updates your view model when the value of an &lt;input&gt; or &lt;textarea&gt; element changes. Note that this event is only raised by reasonably modern browsers (e.g., IE 9+).&lt;br&gt;“keyup” - updates your view model when the user releases a key&lt;br&gt;“keypress” - updates your view model when the user has typed a key. Unlike keyup, this updates repeatedly while the user holds a key down&lt;br&gt;“afterkeydown” - updates your view model as soon as the user begins typing a character. This works by catching the browser’s keydown event and handling the event asynchronously. This does not work in some mobile browsers.&lt;/textarea&gt;&lt;/p&gt;
&lt;p&gt;ou can also trigger updates based on other events by using the valueUpdate parameter described above.。 reference : &lt;a href=&quot;http://knockoutjs.com/documentation/value-binding.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://knockoutjs.com/documentation/value-binding.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When the user presses Enter, it will invoke add function. This will create a new Todo and placed in the list in add function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;br&gt;                this.current = ko.observable();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.add = function(){
    var current = this.current().trim();
    if(current){
        this.todos.push(new Todo(current,false));
        this.current(&amp;apos;&amp;apos;);
    }
}.bind(this);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Display-Todo-list&quot;&gt;&lt;a href=&quot;#Step2-–-Display-Todo-list&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Display Todo list &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Display Todo list &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在显示待办事项时，用三个控件(checkbox、lable、button)组成一个待办事项控件，而在每一个控件也绑定一个:&lt;br&gt;    checkbox : 让用户决定是否已完成&lt;br&gt;    lable    : 显示待办事项标题&lt;br&gt;    button   : 让用户可以删除待办事项&lt;/p&gt;
&lt;p&gt;在knockoutjs可以使用迴圈方式来建立控件，也就是样板的概念，所以绑定ul时我用foreach方式来建立待办事项控件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_1_2.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;foreach: todos()&amp;quot;&amp;gt;
    &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
            &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
            &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Edit-、-Update-and-Delete-Todo-item&quot;&gt;&lt;a href=&quot;#Step2-–-Edit-、-Update-and-Delete-Todo-item&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Edit 、 Update and Delete Todo item &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Edit 、 Update and Delete Todo item &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;To-Do control is to bind complete, edit, update, and delete functions.&lt;/p&gt;
&lt;p&gt;Binding editing function (editItem), I use a double click event: dblclick: $ root.editItem in label elemen, when the user double-clicks the control, label label will disappear and input label appear, and this is also bound to input label on renewal and cancellation empty function.&lt;br&gt;Binding completed ToDo (completed),It is bound to checked event: checked: completed in input element, at the same time update the view model, I have given in the label’s CSS also bind css: {textDecoration: completed () == true}, so when the line is completed to-do will be deleted.&lt;br&gt;Binding delete function (remove), It is bound to click event: click: $ root.remove in button element&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;foreach: todos()&amp;quot;&amp;gt;
    &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
            &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
            &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// delete function
this.remove = function(todo){
    this.todos.remove(todo);
}.bind(this);

// edit function    
this.editItem = function(item){
    item.editing(true);
    item.previousTitle = item.title();
}.bind(this);

// save function    
this.saveEditing = function(item){
    item.editing(false);

    var title = item.title();
    var trimmedTitle = title.trim();

    if(title !== trimmedTitle){
        item.title(trimmedTitle);
    }

    if(!trimmedTitle){
        this.remove(item);
    }
}.bind(this);

// cancel function
this.cancelEditing = function(item){
    item.editing(false);
    item.title(item.previousTitle);
}.bind(this);

// save function    
ko.computed(function(){
    localStorage.setItem(&amp;apos;todos-knockoutjs&amp;apos;, ko.toJSON(this.todos));
}.bind(this)).extend({
    rateLimit: {timeout: 500, method: &amp;apos;notifyWhenChangesStop&amp;apos;}
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you finish , you can see the TodoApp as below .&lt;br&gt;&lt;img src=&quot;/images/Knockout_Step1.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step1/index.html&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-Knockout-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-Knockout-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with Knockout.js&quot;&gt;&lt;/a&gt; Building a Todo app with Knockout.js&lt;/h1&gt;&lt;p&gt;This is my first attempt with Knockout-js to build a Todo App.&lt;br&gt;Knockout is a popular JavaScript library that simplifies the creation of complex data-based user interfaces. It can be used alone or with other libraries, such as jQuery. Its primary purpose is to bind UI elements to an underlying data model defined as a JavaScript object, such that when changes are made to the UI, the model is updated, and vice versa. Knockout facilitates the use of a Model-View-ViewModel (MVVM) pattern in a web application’s client-side behavior. The two main concepts one must learn when working with Knockout’s MVVM implementation are Observables and Bindings.&lt;/p&gt;
&lt;p&gt;Lets start.You can follow the steps from the github repo for this tutorial.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>Knockout-js-todo-list-sortable-tw-1</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-1/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-1/</id>
    <published>2016-10-05T10:36:35.000Z</published>
    <updated>2016-10-06T09:04:05.726Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-Knockout-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-Knockout-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with Knockout.js&quot;&gt;&lt;/a&gt; Building a Todo app with Knockout.js&lt;/h1&gt;&lt;p&gt;這是我首次嘗試用Knockout-JS建立一個待辦事項應用。Knockout-JS是一個JavaScript庫，它簡化了複雜的基於數據的用戶界面的創建。它可以單獨使用或與其他庫，如jQuery的使用。它的主要目的是UI元素綁定到定義為JavaScript對象的底層數據模型，例如，當更改了UI製作，模型更新，反之亦然。&lt;br&gt;Knockout有助於在Web應用程序的客戶端行為使用模型 - 視圖 - 視圖模型（MVVM -Model-View-ViewModel）模式。與Knockout的MVVM執行工作時，一個人必須學會的兩個主要概念是觀測(Observables)和綁定(Bindings)。。&lt;/p&gt;
&lt;p&gt;讓我們開始.您可以按照從我的GitHub庫的步驟本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果你不熟悉KnockoutJS，那麽我會強烈建議閱讀Knockout完整的&lt;a href=&quot;http://learn.knockoutjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;教程.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Todo List待辦事項應用的功能是記錄代辦事項，簡單到不需要本地存儲，所有的代辦事項都只是存儲在內存中，就是只有程序打開的時候可以增加、修改、查看、更新和刪除代辦事項&lt;/p&gt;
&lt;p&gt;根據以上敘述可以知道這個待辦事項應用要有基本的CRUD (Create-Read-Update-Delete)功能，還要能儲存代辦事項功能。&lt;/p&gt;
&lt;p&gt;我就根據這樣的需求來建立Knockout.js待辦事項應用程序 &lt;/p&gt;
&lt;h1 id=&quot;Step1-–-build-ViewModel&quot;&gt;&lt;a href=&quot;#Step1-–-build-ViewModel&quot; class=&quot;headerlink&quot; title=&quot;Step1 – build ViewModel &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – build ViewModel &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;建設Knockout.js應用的主要先建立ViewModel，建立ViewModel之前先將Todo項目轉成物件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; Todo object &lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Todo = function(title, completed){
    this.title = ko.observable(title);               //待辦事項標題
    this.completed = ko.observable(completed);       //待辦事項是否完成 True: 完成 False: 未完成
    this.editing = ko.observable(false);             //是否編輯中 True: 編輯中 
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我用Array方式來存放待辦事項&lt;br&gt;&lt;strong&gt;&lt;em&gt; ViewModel: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ViewModel = function(todos){
    this.todos = ko.observableArray(todos.map(function(todo){
    return new Todo(todo.title, todo.completed);
    }));
};
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step1-–-Add-function&quot;&gt;&lt;a href=&quot;#Step1-–-Add-function&quot; class=&quot;headerlink&quot; title=&quot;Step1 – Add function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – Add function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;宣告一個變數current並綁定在input控件 :  value 綁定是關聯DOM元素的值到view model的屬性上。當用戶編輯表單控件的時候， view model對應的屬性值會自動更新。同樣，當你更新view model屬性的時候，相對應的元素值在頁面上也會自動更新。&lt;br&gt;value 綁定有一個主要參數(Value)和其他參數(valueUpdate)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_1_1.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;todoField&amp;quot; id=&amp;quot;new-todo&amp;quot; data-bind=&amp;quot;value: current, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: add&amp;quot; placeholder=&amp;quot;What needs to be done?&amp;quot; autofocus&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; valueUpdate &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你使用valueUpdate參數，那就是意味著KO將使用自定義的事件而不是默認的離開焦點事件。下面是一些最常用的選項：&lt;/p&gt;
&lt;p&gt;“change”（默認值） - 當失去焦點的時候更新view model的值，或者是&lt;select&gt; 元素被選擇的時候。&lt;/select&gt;&lt;/p&gt;
&lt;p&gt;“keyup” – 當用戶敲完一個字符以後立即更新view model。&lt;/p&gt;
&lt;p&gt;“keypress” – 當用戶正在敲一個字符但沒有釋放鍵盤的時候就立即更新view model。不像 keyup，這個更新和keydown是一樣的。&lt;/p&gt;
&lt;p&gt;“afterkeydown” – 當用戶開始輸入字符的時候就更新view model。主要是捕獲瀏覽器的keydown事件或異步handle事件。&lt;/p&gt;
&lt;p&gt;上述這些選項，如果你想讓你的view model進行實時更新，使用“afterkeydown”是最好的選擇。 更多的請參考&lt;a href=&quot;http://knockoutjs.com/documentation/value-binding.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://knockoutjs.com/documentation/value-binding.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;當用戶按下Enter時，就會呼叫add function，在此會建立新的Todo並放入清單中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;br&gt;                this.current = ko.observable();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.add = function(){
    var current = this.current().trim();
    if(current){
        this.todos.push(new Todo(current,false));
        this.current(&amp;apos;&amp;apos;);
    }
}.bind(this);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Display-Todo-list&quot;&gt;&lt;a href=&quot;#Step2-–-Display-Todo-list&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Display Todo list &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Display Todo list &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在顯示待辦事項時，用三個控件(checkbox、lable、button)組成一個待辦事項控件，而在每一個控件也綁定一個:&lt;br&gt;    checkbox : 讓用戶決定是否已完成&lt;br&gt;    lable    : 顯示待辦事項標題&lt;br&gt;    button   : 讓用戶可以刪除待辦事項&lt;/p&gt;
&lt;p&gt;在knockoutjs可以使用迴圈方式來建立控件，也就是樣板的概念，所以綁定ul時我用foreach方式來建立待辦事項控件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_1_2.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;foreach: todos()&amp;quot;&amp;gt;
    &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
            &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
            &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Edit-、-Update-and-Delete-Todo-item&quot;&gt;&lt;a href=&quot;#Step2-–-Edit-、-Update-and-Delete-Todo-item&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Edit 、 Update and Delete Todo item &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Edit 、 Update and Delete Todo item &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在待辦事項控件裡，要綁定完成待辦事項、編輯、更新及刪除功能。 &lt;/p&gt;
&lt;p&gt;綁定編輯功能(editItem)時，我使用double click 事件 : dblclick: $root.editItem，當用戶雙擊控件時，label控件會消失而input控件會出現，而這個input控件上也綁定了更新與取消空功能。 &lt;/p&gt;
&lt;p&gt;綁定完成待辦事項(completed)，綁定在checked 事件 : checked: completed，在同時更新view model時，我也特定在label的CSS也綁定css: {textDecoration:completed()==true}，所以當完成待辦事項時就會出現刪除線。&lt;/p&gt;
&lt;p&gt;綁定刪除功能(remove)，綁定在click 事件 :click: $root.remove&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;foreach: todos()&amp;quot;&amp;gt;
    &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
            &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
            &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// delete function
this.remove = function(todo){
    this.todos.remove(todo);
}.bind(this);

// edit function    
this.editItem = function(item){
    item.editing(true);
    item.previousTitle = item.title();
}.bind(this);

// save function    
this.saveEditing = function(item){
    item.editing(false);

    var title = item.title();
    var trimmedTitle = title.trim();

    if(title !== trimmedTitle){
        item.title(trimmedTitle);
    }

    if(!trimmedTitle){
        this.remove(item);
    }
}.bind(this);

// cancel function
this.cancelEditing = function(item){
    item.editing(false);
    item.title(item.previousTitle);
}.bind(this);

// save function    
ko.computed(function(){
    localStorage.setItem(&amp;apos;todos-knockoutjs&amp;apos;, ko.toJSON(this.todos));
}.bind(this)).extend({
    rateLimit: {timeout: 500, method: &amp;apos;notifyWhenChangesStop&amp;apos;}
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當你完成，你可以看到 TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Knockout_Step1.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step1/index.html&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-tw-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-Knockout-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-Knockout-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with Knockout.js&quot;&gt;&lt;/a&gt; Building a Todo app with Knockout.js&lt;/h1&gt;&lt;p&gt;這是我首次嘗試用Knockout-JS建立一個待辦事項應用。Knockout-JS是一個JavaScript庫，它簡化了複雜的基於數據的用戶界面的創建。它可以單獨使用或與其他庫，如jQuery的使用。它的主要目的是UI元素綁定到定義為JavaScript對象的底層數據模型，例如，當更改了UI製作，模型更新，反之亦然。&lt;br&gt;Knockout有助於在Web應用程序的客戶端行為使用模型 - 視圖 - 視圖模型（MVVM -Model-View-ViewModel）模式。與Knockout的MVVM執行工作時，一個人必須學會的兩個主要概念是觀測(Observables)和綁定(Bindings)。。&lt;/p&gt;
&lt;p&gt;讓我們開始.您可以按照從我的GitHub庫的步驟本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>Knockout-js-todo-list-sortable-cn-1</title>
    <link href="https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-1/"/>
    <id>https://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-1/</id>
    <published>2016-10-05T10:36:22.000Z</published>
    <updated>2016-10-06T09:03:28.111Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-Knockout-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-Knockout-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with Knockout.js&quot;&gt;&lt;/a&gt; Building a Todo app with Knockout.js&lt;/h1&gt;&lt;p&gt;这是我首次尝试用Knockout-JS建立一个待办事项应用。Knockout-JS是一个JavaScript库，它简化了複杂的基于数据的用户界面的创建。它可以单独使用或与其他库，如jQuery的使用。它的主要目的是UI元素绑定到定义为JavaScript对象的底层数据模型，例如，当更改了UI製作，模型更新，反之亦然。&lt;br&gt;Knockout有助于在Web应用程序的客户端行为使用模型 - 视图 - 视图模型（MVVM -Model-View-ViewModel）模式。与Knockout的MVVM执行工作时，一个人必须学会的两个主要概念是观测(Observables)和绑定(Bindings)。。&lt;/p&gt;
&lt;p&gt;让我们开始.您可以按照从我的GitHub库的步骤本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果你不熟悉KnockoutJS，那麽我会强烈建议阅读Knockout完整的&lt;a href=&quot;http://learn.knockoutjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tutorial&lt;/a&gt;教程.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Todo List待办事项应用的功能是记录代办事项，简单到不需要本地存储，所有的代办事项都只是存储在内存中，就是只有程序打开的时候可以增加、修改、查看、更新和删除代办事项&lt;/p&gt;
&lt;p&gt;根据以上叙述可以知道这个待办事项应用要有基本的CRUD (Create-Read-Update-Delete)功能，还要能储存代办事项功能。&lt;/p&gt;
&lt;p&gt;我就根据这样的需求来建立Knockout.js待办事项应用程序 &lt;/p&gt;
&lt;h1 id=&quot;Step1-–-build-ViewModel&quot;&gt;&lt;a href=&quot;#Step1-–-build-ViewModel&quot; class=&quot;headerlink&quot; title=&quot;Step1 – build ViewModel &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – build ViewModel &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;建设Knockout.js应用的主要先建立ViewModel，建立ViewModel之前先将Todo项目转成物件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; Todo object &lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var Todo = function(title, completed){
    this.title = ko.observable(title);               //待办事项标题
    this.completed = ko.observable(completed);       //待办事项是否完成 True: 完成 False: 未完成
    this.editing = ko.observable(false);             //是否编辑中 True: 编辑中 
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我用Array方式来存放待办事项&lt;br&gt;&lt;strong&gt;&lt;em&gt; ViewModel: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ViewModel = function(todos){
    this.todos = ko.observableArray(todos.map(function(todo){
    return new Todo(todo.title, todo.completed);
    }));
};
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step1-–-Add-function&quot;&gt;&lt;a href=&quot;#Step1-–-Add-function&quot; class=&quot;headerlink&quot; title=&quot;Step1 – Add function &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step1 – Add function &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;宣告一个变数current并绑定在input控件 :  value 绑定是关联DOM元素的值到view model的属性上。当用户编辑表单控件的时候， view model对应的属性值会自动更新。同样，当你更新view model属性的时候，相对应的元素值在页面上也会自动更新。&lt;br&gt;value 绑定有一个主要参数(Value)和其他参数(valueUpdate)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_1_1.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input class=&amp;quot;todoField&amp;quot; id=&amp;quot;new-todo&amp;quot; data-bind=&amp;quot;value: current, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: add&amp;quot; placeholder=&amp;quot;What needs to be done?&amp;quot; autofocus&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;strong&gt; valueUpdate &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你使用valueUpdate参数，那就是意味着KO将使用自定义的事件而不是默认的离开焦点事件。下面是一些最常用的选项：&lt;/p&gt;
&lt;p&gt;“change”（默认值） - 当失去焦点的时候更新view model的值，或者是&lt;select&gt; 元素被选择的时候。&lt;/select&gt;&lt;/p&gt;
&lt;p&gt;“keyup” – 当用户敲完一个字符以后立即更新view model。&lt;/p&gt;
&lt;p&gt;“keypress” – 当用户正在敲一个字符但没有释放键盘的时候就立即更新view model。不像 keyup，这个更新和keydown是一样的。&lt;/p&gt;
&lt;p&gt;“afterkeydown” – 当用户开始输入字符的时候就更新view model。主要是捕获浏览器的keydown事件或异步handle事件。&lt;/p&gt;
&lt;p&gt;上述这些选项，如果你想让你的view model进行实时更新，使用“afterkeydown”是最好的选择。 更多的请参考&lt;a href=&quot;http://knockoutjs.com/documentation/value-binding.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://knockoutjs.com/documentation/value-binding.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当用户按下Enter时，就会呼叫add function，在此会建立新的Todo并放入清单中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;br&gt;                this.current = ko.observable();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;this.add = function(){
    var current = this.current().trim();
    if(current){
        this.todos.push(new Todo(current,false));
        this.current(&amp;apos;&amp;apos;);
    }
}.bind(this);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Display-Todo-list&quot;&gt;&lt;a href=&quot;#Step2-–-Display-Todo-list&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Display Todo list &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Display Todo list &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在显示待办事项时，用三个控件(checkbox、lable、button)组成一个待办事项控件，而在每一个控件也绑定一个:&lt;br&gt;    checkbox : 让用户决定是否已完成&lt;br&gt;    lable    : 显示待办事项标题&lt;br&gt;    button   : 让用户可以删除待办事项&lt;/p&gt;
&lt;p&gt;在knockoutjs可以使用迴圈方式来建立控件，也就是样板的概念，所以绑定ul时我用foreach方式来建立待办事项控件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 介面 &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![TodoListApp](/images/knockoutjs_1_2.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;foreach: todos()&amp;quot;&amp;gt;
    &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
            &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
            &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Step2-–-Edit-、-Update-and-Delete-Todo-item&quot;&gt;&lt;a href=&quot;#Step2-–-Edit-、-Update-and-Delete-Todo-item&quot; class=&quot;headerlink&quot; title=&quot;Step2 – Edit 、 Update and Delete Todo item &quot;&gt;&lt;/a&gt;&lt;strong&gt;Step2 – Edit 、 Update and Delete Todo item &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在待办事项控件裡，要绑定完成待办事项、编辑、更新及删除功能。 &lt;/p&gt;
&lt;p&gt;绑定编辑功能(editItem)时，我使用double click 事件 : dblclick: $root.editItem，当用户双击控件时，label控件会消失而input控件会出现，而这个input控件上也绑定了更新与取消空功能。&lt;br&gt;绑定完成待办事项(completed)，绑定在checked 事件 : checked: completed，在同时更新view model时，我也特定在label的CSS也绑定css: {textDecoration:completed()==true}，所以当完成待办事项时就会出现删除线。&lt;br&gt;绑定删除功能(remove)，綁定在click 事件 :click: $root.remove&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; index.html: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul id=&amp;quot;todo-list&amp;quot; data-bind=&amp;quot;foreach: todos()&amp;quot;&amp;gt;
    &amp;lt;li data-bind=&amp;quot;css: { completed: completed, editing: editing }&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;view&amp;quot;&amp;gt;
            &amp;lt;input class=&amp;quot;todoCheckbox&amp;quot; data-bind=&amp;quot;checked: completed&amp;quot; type=&amp;quot;checkbox&amp;quot; &amp;gt;
            &amp;lt;label data-bind=&amp;quot;text: title, event: { dblclick: $root.editItem }, css: {textDecoration:completed()==true}&amp;quot; &amp;gt;&amp;lt;/label&amp;gt;
            &amp;lt;button class=&amp;quot;close pull-right&amp;quot; data-bind=&amp;quot;click: $root.remove&amp;quot;&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;input class=&amp;quot;edit&amp;quot; data-bind=&amp;quot;value: title, valueUpdate: &amp;apos;afterkeydown&amp;apos;, enterKey: $root.saveEditing, escapeKey: $root.cancelEditing, selectAndFocus: editing, event: { blur: $root.saveEditing }&amp;quot;&amp;gt;
    &amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt; App.js: &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// delete function
this.remove = function(todo){
    this.todos.remove(todo);
}.bind(this);

// edit function    
this.editItem = function(item){
    item.editing(true);
    item.previousTitle = item.title();
}.bind(this);

// save function    
this.saveEditing = function(item){
    item.editing(false);

    var title = item.title();
    var trimmedTitle = title.trim();

    if(title !== trimmedTitle){
        item.title(trimmedTitle);
    }

    if(!trimmedTitle){
        this.remove(item);
    }
}.bind(this);

// cancel function
this.cancelEditing = function(item){
    item.editing(false);
    item.title(item.previousTitle);
}.bind(this);

// save function    
ko.computed(function(){
    localStorage.setItem(&amp;apos;todos-knockoutjs&amp;apos;, ko.toJSON(this.todos));
}.bind(this)).extend({
    rateLimit: {timeout: 500, method: &amp;apos;notifyWhenChangesStop&amp;apos;}
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你完成，你可以看到 TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Knockout_Step1.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step1/index.html&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with Knockout.js (1) - A simple todo list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/10/05/Knockout-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with Knockout.js (2) - Filter、Search and Sortable function&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-Knockout-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-Knockout-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with Knockout.js&quot;&gt;&lt;/a&gt; Building a Todo app with Knockout.js&lt;/h1&gt;&lt;p&gt;这是我首次尝试用Knockout-JS建立一个待办事项应用。Knockout-JS是一个JavaScript库，它简化了複杂的基于数据的用户界面的创建。它可以单独使用或与其他库，如jQuery的使用。它的主要目的是UI元素绑定到定义为JavaScript对象的底层数据模型，例如，当更改了UI製作，模型更新，反之亦然。&lt;br&gt;Knockout有助于在Web应用程序的客户端行为使用模型 - 视图 - 视图模型（MVVM -Model-View-ViewModel）模式。与Knockout的MVVM执行工作时，一个人必须学会的两个主要概念是观测(Observables)和绑定(Bindings)。。&lt;/p&gt;
&lt;p&gt;让我们开始.您可以按照从我的GitHub库的步骤本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/KnockoutJs_todolist/Step2/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/Knockout-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/Knockout_ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/categories/Knockout-js/"/>
    
    
      <category term="Knockout-js" scheme="https://kennethhutw.github.io/tags/Knockout-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(5)</title>
    <link href="https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-5/"/>
    <id>https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-5/</id>
    <published>2016-08-18T02:24:07.000Z</published>
    <updated>2016-08-18T01:57:13.213Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步是允許用戶使用拖放來改變ToDoListItem的序列（ DND）&lt;/p&gt;
&lt;p&gt;我們將允許用戶進行排序使用拖放一個數組。我們首先創建li元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDoList&quot;&gt;&lt;a href=&quot;#Component-1-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我們創建DragStar功能， DragEnd功能的dragover函數來實現（拖放）的DnD過程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragStart: function(e){
    this.dragged = e.currentTarget;
    e.dataTransfer.effectAllowed = &amp;apos;move&amp;apos;;
},
DragEnd: function(e){
    this.dragged.style.display=&amp;quot;&amp;quot;;
    var IshasNode = false

    Array.prototype.forEach.call (this.dragged.parentNode.childNodes, function (node) {
        if(node.className==&amp;quot;placeholder&amp;quot;)
                        IshasNode = true;

    } );
    if(!IshasNode)
    return;
    this.dragged.parentNode.removeChild(placeholder);
    var data = this.props.items;
    var from = Number(this.dragged.dataset.id);
    var to = Number(this.over.dataset.id);
    if(from &amp;lt; to) to--;
    if(this.nodePlacement == &amp;quot;after&amp;quot;) to++;
    data.splice(to, 0, data.splice(from, 1)[0]);
    this.setState({data: data});    
},
DragOver: function(e) {

    e.preventDefault();
    this.dragged.style.display = &amp;quot;none&amp;quot;;

    if(e.target.className == &amp;quot;placeholder&amp;quot;) return;
    this.over = e.target;
    // Inside the dragOver method
    var relY = e.clientY - this.over.offsetTop;
    var height = this.over.offsetHeight / 2;
    var parent = e.target.parentNode;

    if(relY &amp;gt; height) {
      this.nodePlacement = &amp;quot;after&amp;quot;;
      parent.insertBefore(placeholder, e.target.nextElementSibling);
    }
    else if(relY &amp;lt; height) {
      this.nodePlacement = &amp;quot;before&amp;quot;
      parent.insertBefore(placeholder, e.target);
    }
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragStar功能和DragEnd功能被綁定到ToDoListItem組件。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onDragEnd={this.DragEnd}
onDragStart={this.DragStart} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dragover功能被綁定到UI元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul onDragOver={this.DragOver}&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoListItem&quot;&gt;&lt;a href=&quot;#Component-2-ToDoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我們創造DragEndHandler功能， DragStartHandler功能觸發父的事件，並綁定到li元素。我們還需要設置 li元素上draggable = true屬性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragEndHandler : function(e){
    this.props.onDragEnd(e);
},
DragStartHandler : function(e){
    this.props.onDragStart(e);
},
render: function(){
    var _style = &amp;quot;line-through&amp;quot;;
    if(!this.props.children.isDone)
    _style =&amp;quot;none&amp;quot;;
    return (
      &amp;lt;li data-id={this.props.value} 
                key={this.props.value} draggable=&amp;quot;true&amp;quot; onDragEnd={this.DragEndHandler}
            onDragStart={this.DragStartHandler}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHandler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.ChangeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你現在應該有下面的截圖&lt;br&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步是允許用戶使用拖放來改變ToDoListItem的序列（ DND）&lt;/p&gt;
&lt;p&gt;我們將允許用戶進行排序使用拖放一個數組。我們首先創建li元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(4)</title>
    <link href="https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-4/"/>
    <id>https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-4/</id>
    <published>2016-08-18T02:23:59.000Z</published>
    <updated>2016-08-18T01:57:18.221Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步將是添加多個待辦事項的能力。例如，我們可能有僅用於grocey列出清單，其他的可能是計劃的博客文章列表或的事情要做今天的名單。這就是為什麽有在不同的列表中的待辦事項進行排序能力是很重要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Catelog-Form&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Catelog-Form&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDo Catelog Form&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDo Catelog Form&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它包含一個文本字段後跟一個按鈕來觸發待辦事項列表中增加新的代辦事項的目錄。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatalogForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
          item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group &amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;newTodoCatalogField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
              &amp;lt;/div&amp;gt;

        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDo-Catelog&quot;&gt;&lt;a href=&quot;#Component-2-ToDo-Catelog&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDo Catelog&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDo Catelog&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它會顯示所有的待辦事項列表。selectedID是將當前存儲待辦事項被示出的變量，在待辦事項列表會根據selectedID更新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatelog  = React.createClass({
    changeTodo : function(e){
        this.props.onSelected( e.currentTarget.dataset.id);
    },
    checkActive:function(i){
        if (i == this.props.selectedID)
        {
            return &amp;quot;list-group-item active&amp;quot;;
        }
        else
        {
            return &amp;quot;list-group-item &amp;quot;;
        }
    },
    render: function(){    
        var selectedID = this .props.selectedID;
        var allitems =this.props.Todos;

        return &amp;lt;div className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            allitems.map(function(item,i){ 
            var _class = &amp;quot;&amp;quot;;
            if (i == this.props.selectedID)
            {
                _class =  &amp;quot;list-group-item active&amp;quot;;
            }
            else
            {
                _class =  &amp;quot;list-group-item &amp;quot;;
            }
            return(
                 &amp;lt;a href=&amp;quot;#&amp;quot; key={i} data-id={i} className={_class} onClick={this.changeTodo} &amp;gt;&amp;lt;span className=&amp;quot;badge&amp;quot; &amp;gt;{item.items.length}&amp;lt;/span&amp;gt;{item.name}&amp;lt;/a&amp;gt;
            )
        },this)}&amp;lt;/div&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-3-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 3  - ToDoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3  - ToDoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我們將重新聲明getInitialState函數的返回值，把項目歸納到目錄下面並增加一個selectedCatelog 變數來保存目前的目錄。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
        return {Todo:[{name:&amp;quot;parimary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;aaaa&amp;apos;,isDone:true},{item:&amp;apos;dddd&amp;apos;,isDone:true}
        ]},{name:&amp;quot;Secondary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;Todo itmd #3&amp;apos;,isDone:true}
        ]}],filter:[{keyword:&amp;apos;&amp;apos;,Status:&amp;quot;SHOW_ALL&amp;quot;}],selectedCatelog:&amp;quot;0&amp;quot;};
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我們創造AddCatelog功能和setSelectedCatalog功能。 AddCatelog功能用來新增新的代辦事項的目錄，而setSelectedCatalog功能是用來保存現在查看那一個目錄。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Here is the Add Catelog function 
AddCatelog: function(newCatalog){
    var Catalog = {name:newCatalog,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false}]};
    var newtodo = this.state.Todo.concat([Catalog]);
    this.setState({
        Todo: newtodo
    });
},
setSelectedCatalog: function(index){
    this.state.selectedCatelog = index;
    this.setState({
        selectedCatelog: index
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此同時，我們還需要修改updateItems功能和deleteItem功能。更新項目或刪除項目都是根據selectedCatelog來進行的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;updateItems: function(newItem){    
        var item = {item:newItem,isDone:false};
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.concat([item]);
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
    },
deleteItem : function(index){
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.slice(); //copy array
        allItems.splice(index, 1); //remove element
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最後，我們插入ToDoCatalogForm組件和ToDoCatelog組件到渲染功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function(){
    return (
        &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-3&amp;quot;&amp;gt;
                &amp;lt;ToDoCatalogForm onFormSubmit = {this.AddCatelog} /&amp;gt;
                &amp;lt;ToDoCatelog selectedID = {this.state.selectedCatelog} onSelected={this.setSelectedCatalog} Todos = {this.state.Todo} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-6&amp;quot;&amp;gt;
                &amp;lt;ToDoBanner/&amp;gt;
                &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
                &amp;lt;ToDoForm onFormSubmit = {this.updateItems} /&amp;gt;
                &amp;lt;ToDoList  items = {this.state.Todo[this.state.selectedCatelog].items} filter = {this.state.filter} onDelete={this.deleteItem}/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你現在應該有下面的截圖&lt;br&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step5/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步將是添加多個待辦事項的能力。例如，我們可能有僅用於grocey列出清單，其他的可能是計劃的博客文章列表或的事情要做今天的名單。這就是為什麽有在不同的列表中的待辦事項進行排序能力是很重要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(3)</title>
    <link href="https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-3/"/>
    <id>https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-3/</id>
    <published>2016-08-18T02:23:51.000Z</published>
    <updated>2016-08-18T01:57:24.715Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我們有很多待辦事項，很難通過它們進行搜索，並找到一個特定的待辦事項。它也變得更容易看到所有的完成，未完成任務的一次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - **TODO FILTER**
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Filter&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Filter&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - ToDo Filter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - ToDo Filter&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;這個組件包含過濾器和搜索欄。以下是組件的代碼。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoFilter = React.createClass({
    isActive:function(value){
        return &amp;apos;btn &amp;apos;+((value===this.props.filter[0].Status) ?&amp;apos;btn-primary&amp;apos;:&amp;apos;default&amp;apos;);
    },
    render: function(){
        var onFilter1 = this.props.onFilter;
        var onSearch1 = this.props.onSearch;
        return(
                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-7&amp;quot;&amp;gt;
                        &amp;lt;div id=&amp;quot;todo-filter&amp;quot; className=&amp;quot;input-group&amp;quot;&amp;gt;
                            &amp;lt;span className=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                                &amp;lt;button className=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span className=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                                &amp;lt;/span&amp;gt;
                                &amp;lt;input  type=&amp;quot;search&amp;quot; className=&amp;quot;form-control&amp;quot; ref=&amp;apos;filter&amp;apos; onChange={onSearch1} placeholder=&amp;quot;Search&amp;quot; &amp;gt;&amp;lt;/input&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-5&amp;quot;&amp;gt;
                        &amp;lt;ul className=&amp;quot;nav nav-pills todo-filter&amp;quot;&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;SHOW_ALL&amp;apos;)} value=&amp;quot;SHOW_ALL&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;false&amp;apos;)} value=&amp;quot;false&amp;quot;&amp;gt;Incomplete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                             &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;true&amp;apos;)} value=&amp;quot;true&amp;quot;&amp;gt;Complete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
        ); 
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-2-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - ToDoApp &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - ToDoApp &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在ToDoApp ，我們創建的FilterItem功能， searchItem功能，保存輸入值，然後添加到ToDoFilter渲染功能。&lt;/p&gt;
&lt;p&gt;Here’s the code :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filterItem : function(e){
    this.state.filter[0].Status = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
searchItem : function(e){
    this.state.filter[0].keyword = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
render: function(){
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;ToDoBanner/&amp;gt;
            &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
            &amp;lt;ToDoForm onFormSubmit={this.updateItems} /&amp;gt;
            &amp;lt;ToDoList items={this.state.items} filter = {this.state.filter}  onDelete={this.deleteItem} /&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoList&quot;&gt;&lt;a href=&quot;#Component-3-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - ToDoList &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - ToDoList &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;過濾器方面，用的React-js的filter方法來實現過濾功能。 過濾器將根據用戶輸入的待辦事項列表，來過濾的待辦事項列表。 &lt;/p&gt;
&lt;p&gt;搜索功能方面，我用的indexOf （）方法來實現搜索功能。該的indexOf （）方法返回-1，如果關鍵字搜索不會發生。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {    
    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
    // Here is the filter function 
    var allitems = this.props.items;

    var status = this.props.filter[0].Status;
    switch (status){
        case &amp;apos;false&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; !t.isDone)
         break;
         case &amp;apos;true&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; t.isDone)
    };

    // Here is the search function 
    var queryText = this.props.filter[0].keyword;

    if(queryText){
        var queryResult=[];
        allitems.forEach(function(item){
            if(item.item.toLowerCase().indexOf(queryText)!=-1)
            queryResult.push(item);
        });
        return &amp;lt;ul&amp;gt;{queryResult.map(createItem,this)}&amp;lt;/ul&amp;gt;;
    }

    return &amp;lt;ul&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你現在應該有下面的截圖&lt;br&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step4/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我們有很多待辦事項，很難通過它們進行搜索，並找到一個特定的待辦事項。它也變得更容易看到所有的完成，未完成任務的一次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - **TODO FILTER**
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable (2)</title>
    <link href="https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-2/"/>
    <id>https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-2/</id>
    <published>2016-08-18T02:23:40.000Z</published>
    <updated>2016-08-18T01:57:02.818Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;在這節，我們要改進Components，並刪除項目。讓使用者可以刪除項目和當項目項目已經完成，項目的復選框可以被標記。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Redeclare-Items&quot;&gt;&lt;a href=&quot;#Redeclare-Items&quot; class=&quot;headerlink&quot; title=&quot; Redeclare Items&quot;&gt;&lt;/a&gt;&lt;strong&gt; Redeclare Items&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;為了添加復選框，我們必須重新定義項和修改updateItems功能。陣列中的每個項目都會有一個項目，一個布爾值，特定的任務是否剩余或已完成。布爾值將綁定到TodoListItem復選框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
    return {items:[{item:&amp;apos;Todo itme #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itme #2&amp;apos;,isDone:true}]};
},
updateItems: function(newItem){
    var item = {item:newItem,isDone:false};
    var allItems = this.state.items.concat([item]);
    this.setState({
        items: allItems
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Improve-TodoListItem&quot;&gt;&lt;a href=&quot;#Improve-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Improve TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Improve TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我們將添加到復選框，並TodoListItem綁定事件 - changeHandler 。在changeHandler ，它將更新所選項目的狀態。當渲染組件，它會看到是否應用樣式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoListItem = React.createClass({
        changeHandler: function(e){
            this.setState({
              value: e.target.checked
            });
            this.props.children.isDone = e.target.checked;
        },
        render: function(){
            var _style = &amp;quot;line-through&amp;quot;;
            if(!this.props.children.isDone)
            _style =&amp;quot;none&amp;quot;;
            return (
              &amp;lt;li data-id={this.props.value} 
                        key={this.props.value}&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當您選中或取消選中該單選框，你將看到如何變化。你現在應該有下面的截圖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;h1 id=&quot;Remove-TodoListItem&quot;&gt;&lt;a href=&quot;#Remove-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Remove TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Remove TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step3.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;我們將了解如何將功能綁定到一個組件。我們應該能夠刪除舊的TodoListItem&lt;/p&gt;
&lt;p&gt;在TodoApp組件，我們創建了一個deleteItem功能，綁定此功能到TodoList的組件。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deleteItem : function(index){
            var newData = this.state.items.slice(); //copy array
            newData.splice(index, 1); //remove element
            this.setState({
                items: newData
            });
        },
render: function(){
            return (
                &amp;lt;div&amp;gt;
                    &amp;lt;ToDoBanner/&amp;gt;
                    &amp;lt;TodoForm onFormSubmit={this.updateItems} /&amp;gt;
                    &amp;lt;TodoList items={this.state.items} onDelete={this.deleteItem} /&amp;gt;
                &amp;lt;/div&amp;gt;
            );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在TodoList組件，也創造了刪除功能並綁定到TodoListITem 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoList = React.createClass({
    Remove: function(e){
       this.props.onDelete(e);
    },
    render: function() {
        var createItem = function(itemText, i) {
        return (
                &amp;lt;TodoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt;
              );
          };
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem, this)}&amp;lt;/ul&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 TodoListItem 組件 , 添加按鈕到li元素，並創建一個remove函數綁定到這個按鈕。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RemoveHandler: function(){
       this.props.onRemove(this.props.value);
},
render: function(){
        var _style = &amp;quot;line-through&amp;quot;;
        if(!this.props.children.isDone)
        _style =&amp;quot;none&amp;quot;;
        return (
          &amp;lt;li data-id={this.props.value} 
                    key={this.props.value}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHndler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
        );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你現在應該有下面的截圖&lt;br&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step3/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;在這節，我們要改進Components，並刪除項目。讓使用者可以刪除項目和當項目項目已經完成，項目的復選框可以被標記。&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(1)</title>
    <link href="https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-1/"/>
    <id>https://kennethhutw.github.io/2016/08/18/React-js-todo-list-sortable-tw-1/</id>
    <published>2016-08-18T02:23:24.000Z</published>
    <updated>2016-08-18T01:57:08.306Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;這是我首次嘗試用React-JS建立一個待辦事項應用。React-JS是一個JavaScript庫，用於構建用戶界面，主要是因為它是由Facebook的建立。我們將學習如何使用。&lt;/p&gt;
&lt;p&gt;讓我們開始.您可以按照從GitHub庫的步驟本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在本文中，我們將使用建立一個非常的應用程序Facebook的 &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react.js&lt;/a&gt;. 如果你不熟悉這個庫，那麽我會強烈建議閱讀使用React構建了完整的&lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comment system&lt;/a&gt;教程.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;建設React.js應用的根本出路在於您的應用程序分解成一堆有用的組件，然後你的工作方式向後分別構建它們。一旦各個部件都是準備就緒，可以它們連接起來，以在組件之間交換數據。例如，我們的Todo應用程序可以分解為以下組件和層次結構，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Basic-Skeleton&quot;&gt;&lt;a href=&quot;#Basic-Skeleton&quot; class=&quot;headerlink&quot; title=&quot;Basic Skeleton&quot;&gt;&lt;/a&gt;&lt;strong&gt;Basic Skeleton&lt;/strong&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ ... }); 
    /* [TODO BANNER] &amp;amp;&amp;amp; [TODO LIST] */ 
    var TodoBanner = React.createClass({ ... });
    /* [TODO FORM] */ 
    var TodoForm = React.createClass({ ... });                     
    var TodoList = React.createClass({ ... }); 
        /* [TODO LIST ITEM] */ 
        var TodoListItem = React.createClass({ ... }); 

React.render(&amp;lt;TodoApp/&amp;gt;, document.body);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-1-TodoApp&quot;&gt;&lt;a href=&quot;#Component-1-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;這個組件將持有將由它的子組件以各種形式來共享待辦事項列表。 &lt;em&gt;items&lt;/em&gt;的初始狀態將是一個空白列表。該列表將盡快作為一個新的項目通過&lt;em&gt;TodoForm&lt;/em&gt;組件添加更新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ 
    getInitialState: function(){ 
        return {items: []}; 
    }, 
    updateItems: function(newItem){ 
        var allItems = this.state.items.concat([newItem]); 
        this.setState({items: allItems});
    }, 
    render: function(){ 
        return ( 
            &amp;lt;div&amp;gt; 
                &amp;lt;TodoBanner/&amp;gt;
                &amp;lt;TodoForm onFormSubmit={this.updateItems}/&amp;gt;                                 
                &amp;lt;TodoList items={this.state.items}/&amp;gt;     
            &amp;lt;/div&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-TodoBanner&quot;&gt;&lt;a href=&quot;#Component-2-TodoBanner&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - TodoBanner&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - TodoBanner&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它只是包含了一個標題標簽。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO BANNER] */ 
var TodoBanner = React.createClass({ 
    render: function(){ 
        return ( 
        &amp;lt;h3&amp;gt;TODO....react.js&amp;lt;/h3&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-TodoList&quot;&gt;&lt;a href=&quot;#Component-3-TodoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - TodoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - TodoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它接受的項目的列表和環繞一個TodoListItem組件的每個項目。最終的結果，然後以&amp;lt;ul&amp;gt;標簽包裹。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LIST] */ 
var TodoList = React.createClass({ 
    render: function() { 
    var createItem = function(itemText) { 
        return ( 
            &amp;lt;TodoListItem&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt; 
            );
        }; 
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem)}&amp;lt;/ul&amp;gt;;
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-4-TodoListItem&quot;&gt;&lt;a href=&quot;#Component-4-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 4 - TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 4 - TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它以&amp;lt;li&amp;gt;標簽列出所有項目 ,以便它呈現為在最終的HTML的列表的塊。 this.props.children預見包含傳遞給TodoListItem標簽從其父組件的所有後代。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LISTITEM] */
var TodoListItem = React.createClass({
    render: function(){
        return (
            &amp;lt;li data-id={this.props.value} key={this.props.value}&amp;gt;{this.props.children}&amp;lt;/li&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-5-TodoForm&quot;&gt;&lt;a href=&quot;#Component-5-TodoForm&quot; class=&quot;headerlink&quot; title=&quot;Component 5 - TodoForm&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 5 - TodoForm&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它包含一個文本字段後跟一個按鈕，觸發在待辦事項列表中的另外的項目。此組件將保持當前的項目在文本框輸入並且兩者都使用onChange事件保持同步。由於作為提交按鈕被按下很快，該項目被傳遞給其父組件，焦點返回到文本框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO FORM] */
var TodoForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
            item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group col-sm-10&amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;todoField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Render-TodoApp&quot;&gt;&lt;a href=&quot;#Render-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Render - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Render - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;最後一步是繪制 TodoApp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReactDOM.render(
        &amp;lt;TodoApp/&amp;gt;,
        document.getElementById(&amp;apos;todo&amp;apos;)
      );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;當你完成，你可以看到 TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Step1.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step1/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;這是我首次嘗試用React-JS建立一個待辦事項應用。React-JS是一個JavaScript庫，用於構建用戶界面，主要是因為它是由Facebook的建立。我們將學習如何使用。&lt;/p&gt;
&lt;p&gt;讓我們開始.您可以按照從GitHub庫的步驟本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(5)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/</id>
    <published>2016-07-21T02:24:07.000Z</published>
    <updated>2016-07-21T05:00:33.568Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步是允许用户使用拖放来改变ToDoListItem的序列（ DND）&lt;/p&gt;
&lt;p&gt;我们将允许用户进行排序使用拖放一个数组。我们首先创建li元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDoList&quot;&gt;&lt;a href=&quot;#Component-1-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们创建DragStar功能， DragEnd功能的dragover函数来实现（拖放）的DnD过程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragStart: function(e){
    this.dragged = e.currentTarget;
    e.dataTransfer.effectAllowed = &amp;apos;move&amp;apos;;
},
DragEnd: function(e){
    this.dragged.style.display=&amp;quot;&amp;quot;;
    var IshasNode = false

    Array.prototype.forEach.call (this.dragged.parentNode.childNodes, function (node) {
        if(node.className==&amp;quot;placeholder&amp;quot;)
                        IshasNode = true;

    } );
    if(!IshasNode)
    return;
    this.dragged.parentNode.removeChild(placeholder);
    var data = this.props.items;
    var from = Number(this.dragged.dataset.id);
    var to = Number(this.over.dataset.id);
    if(from &amp;lt; to) to--;
    if(this.nodePlacement == &amp;quot;after&amp;quot;) to++;
    data.splice(to, 0, data.splice(from, 1)[0]);
    this.setState({data: data});    
},
DragOver: function(e) {

    e.preventDefault();
    this.dragged.style.display = &amp;quot;none&amp;quot;;

    if(e.target.className == &amp;quot;placeholder&amp;quot;) return;
    this.over = e.target;
    // Inside the dragOver method
    var relY = e.clientY - this.over.offsetTop;
    var height = this.over.offsetHeight / 2;
    var parent = e.target.parentNode;

    if(relY &amp;gt; height) {
      this.nodePlacement = &amp;quot;after&amp;quot;;
      parent.insertBefore(placeholder, e.target.nextElementSibling);
    }
    else if(relY &amp;lt; height) {
      this.nodePlacement = &amp;quot;before&amp;quot;
      parent.insertBefore(placeholder, e.target);
    }
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragStar功能和DragEnd功能被绑定到ToDoListItem组件。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onDragEnd={this.DragEnd}
onDragStart={this.DragStart} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dragover功能被绑定到UI元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul onDragOver={this.DragOver}&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoListItem&quot;&gt;&lt;a href=&quot;#Component-2-ToDoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们创造DragEndHandler功能， DragStartHandler功能触发父的事件，并绑定到li元素。我们还需要设置 li元素上draggable = true属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragEndHandler : function(e){
    this.props.onDragEnd(e);
},
DragStartHandler : function(e){
    this.props.onDragStart(e);
},
render: function(){
    var _style = &amp;quot;line-through&amp;quot;;
    if(!this.props.children.isDone)
    _style =&amp;quot;none&amp;quot;;
    return (
      &amp;lt;li data-id={this.props.value} 
                key={this.props.value} draggable=&amp;quot;true&amp;quot; onDragEnd={this.DragEndHandler}
            onDragStart={this.DragStartHandler}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHandler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.ChangeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步是允许用户使用拖放来改变ToDoListItem的序列（ DND）&lt;/p&gt;
&lt;p&gt;我们将允许用户进行排序使用拖放一个数组。我们首先创建li元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(4)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/</id>
    <published>2016-07-21T02:23:59.000Z</published>
    <updated>2016-07-21T05:00:46.073Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步将是添加多个待办事项的能力。例如，我们可能有仅用于grocey列出清单，其他的可能是计划的博客文章列表或的事情要做今天的名单。这就是为什么有在不同的列表中的待办事项进行排序能力是很重要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Catelog-Form&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Catelog-Form&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDo Catelog Form&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDo Catelog Form&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它包含一个文本字段后跟一个按钮来触发待办事项列表中增加新的代办事项的目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatalogForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
          item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group &amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;newTodoCatalogField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
              &amp;lt;/div&amp;gt;

        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDo-Catelog&quot;&gt;&lt;a href=&quot;#Component-2-ToDo-Catelog&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDo Catelog&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDo Catelog&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它会显示所有的待办事项列表。selectedID是将当前存储待办事项被示出的变量，在待办事项列表会根据selectedID更新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatelog  = React.createClass({
    changeTodo : function(e){
        this.props.onSelected( e.currentTarget.dataset.id);
    },
    checkActive:function(i){
        if (i == this.props.selectedID)
        {
            return &amp;quot;list-group-item active&amp;quot;;
        }
        else
        {
            return &amp;quot;list-group-item &amp;quot;;
        }
    },
    render: function(){    
        var selectedID = this .props.selectedID;
        var allitems =this.props.Todos;

        return &amp;lt;div className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            allitems.map(function(item,i){ 
            var _class = &amp;quot;&amp;quot;;
            if (i == this.props.selectedID)
            {
                _class =  &amp;quot;list-group-item active&amp;quot;;
            }
            else
            {
                _class =  &amp;quot;list-group-item &amp;quot;;
            }
            return(
                 &amp;lt;a href=&amp;quot;#&amp;quot; key={i} data-id={i} className={_class} onClick={this.changeTodo} &amp;gt;&amp;lt;span className=&amp;quot;badge&amp;quot; &amp;gt;{item.items.length}&amp;lt;/span&amp;gt;{item.name}&amp;lt;/a&amp;gt;
            )
        },this)}&amp;lt;/div&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-3-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 3  - ToDoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3  - ToDoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们将重新声明getInitialState函数的返回值，把项目归纳到目录下面并增加一个selectedCatelog 变数来保存目前的目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
        return {Todo:[{name:&amp;quot;parimary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;aaaa&amp;apos;,isDone:true},{item:&amp;apos;dddd&amp;apos;,isDone:true}
        ]},{name:&amp;quot;Secondary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;Todo itmd #3&amp;apos;,isDone:true}
        ]}],filter:[{keyword:&amp;apos;&amp;apos;,Status:&amp;quot;SHOW_ALL&amp;quot;}],selectedCatelog:&amp;quot;0&amp;quot;};
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们创造AddCatelog功能和setSelectedCatalog功能。 AddCatelog功能用来新增新的代办事项的目录，而setSelectedCatalog功能是用来保存现在查看那一个目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Here is the Add Catelog function 
AddCatelog: function(newCatalog){
    var Catalog = {name:newCatalog,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false}]};
    var newtodo = this.state.Todo.concat([Catalog]);
    this.setState({
        Todo: newtodo
    });
},
setSelectedCatalog: function(index){
    this.state.selectedCatelog = index;
    this.setState({
        selectedCatelog: index
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此同时，我们还需要修改updateItems功能和deleteItem功能。更新项目或删除项目都是根据selectedCatelog来进行的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;updateItems: function(newItem){    
        var item = {item:newItem,isDone:false};
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.concat([item]);
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
    },
deleteItem : function(index){
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.slice(); //copy array
        allItems.splice(index, 1); //remove element
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，我们插入ToDoCatalogForm组件和ToDoCatelog组件到渲染功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function(){
    return (
        &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-3&amp;quot;&amp;gt;
                &amp;lt;ToDoCatalogForm onFormSubmit = {this.AddCatelog} /&amp;gt;
                &amp;lt;ToDoCatelog selectedID = {this.state.selectedCatelog} onSelected={this.setSelectedCatalog} Todos = {this.state.Todo} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-6&amp;quot;&amp;gt;
                &amp;lt;ToDoBanner/&amp;gt;
                &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
                &amp;lt;ToDoForm onFormSubmit = {this.updateItems} /&amp;gt;
                &amp;lt;ToDoList  items = {this.state.Todo[this.state.selectedCatelog].items} filter = {this.state.filter} onDelete={this.deleteItem}/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step5/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步将是添加多个待办事项的能力。例如，我们可能有仅用于grocey列出清单，其他的可能是计划的博客文章列表或的事情要做今天的名单。这就是为什么有在不同的列表中的待办事项进行排序能力是很重要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(3)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/</id>
    <published>2016-07-21T02:23:51.000Z</published>
    <updated>2016-07-21T05:00:56.785Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们有很多待办事项，很难通过它们进行搜索，并找到一个特定的待办事项。它也变得更容易看到所有的完成，未完成任务的一次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - **TODO FILTER**
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Filter&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Filter&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - ToDo Filter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - ToDo Filter&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这个组件包含过滤器和搜索栏。以下是组件的代码。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoFilter = React.createClass({
    isActive:function(value){
        return &amp;apos;btn &amp;apos;+((value===this.props.filter[0].Status) ?&amp;apos;btn-primary&amp;apos;:&amp;apos;default&amp;apos;);
    },
    render: function(){
        var onFilter1 = this.props.onFilter;
        var onSearch1 = this.props.onSearch;
        return(
                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-7&amp;quot;&amp;gt;
                        &amp;lt;div id=&amp;quot;todo-filter&amp;quot; className=&amp;quot;input-group&amp;quot;&amp;gt;
                            &amp;lt;span className=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                                &amp;lt;button className=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span className=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                                &amp;lt;/span&amp;gt;
                                &amp;lt;input  type=&amp;quot;search&amp;quot; className=&amp;quot;form-control&amp;quot; ref=&amp;apos;filter&amp;apos; onChange={onSearch1} placeholder=&amp;quot;Search&amp;quot; &amp;gt;&amp;lt;/input&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-5&amp;quot;&amp;gt;
                        &amp;lt;ul className=&amp;quot;nav nav-pills todo-filter&amp;quot;&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;SHOW_ALL&amp;apos;)} value=&amp;quot;SHOW_ALL&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;false&amp;apos;)} value=&amp;quot;false&amp;quot;&amp;gt;Incomplete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                             &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;true&amp;apos;)} value=&amp;quot;true&amp;quot;&amp;gt;Complete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
        ); 
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-2-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - ToDoApp &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - ToDoApp &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在ToDoApp ，我们创建的FilterItem功能， searchItem功能，保存输入值，然后添加到ToDoFilter渲染功能。&lt;/p&gt;
&lt;p&gt;Here’s the code :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filterItem : function(e){
    this.state.filter[0].Status = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
searchItem : function(e){
    this.state.filter[0].keyword = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
render: function(){
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;ToDoBanner/&amp;gt;
            &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
            &amp;lt;ToDoForm onFormSubmit={this.updateItems} /&amp;gt;
            &amp;lt;ToDoList items={this.state.items} filter = {this.state.filter}  onDelete={this.deleteItem} /&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoList&quot;&gt;&lt;a href=&quot;#Component-3-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - ToDoList &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - ToDoList &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;过滤器方面，用的React-js的filter方法来实现过滤功能。 过滤器将根据用户输入的待办事项列表，来过滤的待办事项列表。 &lt;/p&gt;
&lt;p&gt;搜索功能方面，我用的indexOf （）方法来实现搜索功能。该的indexOf （）方法返回-1，如果关键字搜索不会发生。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {    
    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
    // Here is the filter function 
    var allitems = this.props.items;

    var status = this.props.filter[0].Status;
    switch (status){
        case &amp;apos;false&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; !t.isDone)
         break;
         case &amp;apos;true&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; t.isDone)
    };

    // Here is the search function 
    var queryText = this.props.filter[0].keyword;

    if(queryText){
        var queryResult=[];
        allitems.forEach(function(item){
            if(item.item.toLowerCase().indexOf(queryText)!=-1)
            queryResult.push(item);
        });
        return &amp;lt;ul&amp;gt;{queryResult.map(createItem,this)}&amp;lt;/ul&amp;gt;;
    }

    return &amp;lt;ul&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step4/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们有很多待办事项，很难通过它们进行搜索，并找到一个特定的待办事项。它也变得更容易看到所有的完成，未完成任务的一次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - **TODO FILTER**
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable (2)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/</id>
    <published>2016-07-21T02:23:40.000Z</published>
    <updated>2016-07-21T05:01:09.226Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这节，我们要改进Components，并删除项目。让使用者可以删除项目和当项目项目已经完成，项目的复选框可以被标记。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Redeclare-Items&quot;&gt;&lt;a href=&quot;#Redeclare-Items&quot; class=&quot;headerlink&quot; title=&quot; Redeclare Items&quot;&gt;&lt;/a&gt;&lt;strong&gt; Redeclare Items&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;为了添加复选框，我们必须重新定义项和修改updateItems功能。阵列中的每个项目都会有一个项目，一个布尔值，特定的任务是否剩余或已完成。布尔值将绑定到TodoListItem复选框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
    return {items:[{item:&amp;apos;Todo itme #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itme #2&amp;apos;,isDone:true}]};
},
updateItems: function(newItem){
    var item = {item:newItem,isDone:false};
    var allItems = this.state.items.concat([item]);
    this.setState({
        items: allItems
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Improve-TodoListItem&quot;&gt;&lt;a href=&quot;#Improve-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Improve TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Improve TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们将添加到复选框，并TodoListItem绑定事件 - changeHandler 。在changeHandler ，它将更新所选项目的状态。当渲染组件，它会看到是否应用样式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoListItem = React.createClass({
        changeHandler: function(e){
            this.setState({
              value: e.target.checked
            });
            this.props.children.isDone = e.target.checked;
        },
        render: function(){
            var _style = &amp;quot;line-through&amp;quot;;
            if(!this.props.children.isDone)
            _style =&amp;quot;none&amp;quot;;
            return (
              &amp;lt;li data-id={this.props.value} 
                        key={this.props.value}&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当您选中或取消选中该单选框，你将看到如何变化。你现在应该有下面的截图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;h1 id=&quot;Remove-TodoListItem&quot;&gt;&lt;a href=&quot;#Remove-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Remove TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Remove TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step3.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们将了解如何将功能绑定到一个组件。我们应该能够删除旧的TodoListItem&lt;/p&gt;
&lt;p&gt;在TodoApp组件，我们创建了一个deleteItem功能，绑定此功能到TodoList的组件。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deleteItem : function(index){
            var newData = this.state.items.slice(); //copy array
            newData.splice(index, 1); //remove element
            this.setState({
                items: newData
            });
        },
render: function(){
            return (
                &amp;lt;div&amp;gt;
                    &amp;lt;ToDoBanner/&amp;gt;
                    &amp;lt;TodoForm onFormSubmit={this.updateItems} /&amp;gt;
                    &amp;lt;TodoList items={this.state.items} onDelete={this.deleteItem} /&amp;gt;
                &amp;lt;/div&amp;gt;
            );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在TodoList组件，也创造了删除功能并绑定到TodoListITem 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoList = React.createClass({
    Remove: function(e){
       this.props.onDelete(e);
    },
    render: function() {
        var createItem = function(itemText, i) {
        return (
                &amp;lt;TodoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt;
              );
          };
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem, this)}&amp;lt;/ul&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 TodoListItem 组件 , 添加按钮到li元素，并创建一个remove函数绑定到这个按钮。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RemoveHandler: function(){
       this.props.onRemove(this.props.value);
},
render: function(){
        var _style = &amp;quot;line-through&amp;quot;;
        if(!this.props.children.isDone)
        _style =&amp;quot;none&amp;quot;;
        return (
          &amp;lt;li data-id={this.props.value} 
                    key={this.props.value}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHndler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
        );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step3/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这节，我们要改进Components，并删除项目。让使用者可以删除项目和当项目项目已经完成，项目的复选框可以被标记。&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(1)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/</id>
    <published>2016-07-21T02:23:24.000Z</published>
    <updated>2016-07-21T05:01:37.471Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;这是我首次尝试用React-JS建立一个待办事项应用。React-JS是一个JavaScript库，用于构建用户界面，主要是因为它是由Facebook的建立。我们将学习如何使用。&lt;/p&gt;
&lt;p&gt;让我们开始.您可以按照从GitHub库的步骤本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在本文中，我们将使用建立一个非常的应用程序Facebook的 &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react.js&lt;/a&gt;. 如果你不熟悉这个库，那么我会强烈建议阅读使用React构建了完整的&lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comment system&lt;/a&gt;教程.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;建设React.js应用的根本出路在于您的应用程序分解成一堆有用的组件，然后你的工作方式向后分别构建它们。一旦各个部件都是准备就绪，可以它们连接起来，以在组件之间交换数据。例如，我们的Todo应用程序可以分解为以下组件和层次结构，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Basic-Skeleton&quot;&gt;&lt;a href=&quot;#Basic-Skeleton&quot; class=&quot;headerlink&quot; title=&quot;Basic Skeleton&quot;&gt;&lt;/a&gt;&lt;strong&gt;Basic Skeleton&lt;/strong&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ ... }); 
    /* [TODO BANNER] &amp;amp;&amp;amp; [TODO LIST] */ 
    var TodoBanner = React.createClass({ ... });
    /* [TODO FORM] */ 
    var TodoForm = React.createClass({ ... });                     
    var TodoList = React.createClass({ ... }); 
        /* [TODO LIST ITEM] */ 
        var TodoListItem = React.createClass({ ... }); 

React.render(&amp;lt;TodoApp/&amp;gt;, document.body);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-1-TodoApp&quot;&gt;&lt;a href=&quot;#Component-1-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这个组件将持有将由它的子组件以各种形式来共享待办事项列表。 &lt;em&gt;items&lt;/em&gt;的初始状态将是一个空白列表。该列表将尽快作为一个新的项目通过&lt;em&gt;TodoForm&lt;/em&gt;组件添加更新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ 
    getInitialState: function(){ 
        return {items: []}; 
    }, 
    updateItems: function(newItem){ 
        var allItems = this.state.items.concat([newItem]); 
        this.setState({items: allItems});
    }, 
    render: function(){ 
        return ( 
            &amp;lt;div&amp;gt; 
                &amp;lt;TodoBanner/&amp;gt;
                &amp;lt;TodoForm onFormSubmit={this.updateItems}/&amp;gt;                                 
                &amp;lt;TodoList items={this.state.items}/&amp;gt;     
            &amp;lt;/div&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-TodoBanner&quot;&gt;&lt;a href=&quot;#Component-2-TodoBanner&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - TodoBanner&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - TodoBanner&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它只是包含了一个标题标签。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO BANNER] */ 
var TodoBanner = React.createClass({ 
    render: function(){ 
        return ( 
        &amp;lt;h3&amp;gt;TODO....react.js&amp;lt;/h3&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-TodoList&quot;&gt;&lt;a href=&quot;#Component-3-TodoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - TodoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - TodoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它接受的项目的列表和环绕一个TodoListItem组件的每个项目。最终的结果，然后以&amp;lt;ul&amp;gt;标签包裹。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LIST] */ 
var TodoList = React.createClass({ 
    render: function() { 
    var createItem = function(itemText) { 
        return ( 
            &amp;lt;TodoListItem&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt; 
            );
        }; 
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem)}&amp;lt;/ul&amp;gt;;
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-4-TodoListItem&quot;&gt;&lt;a href=&quot;#Component-4-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 4 - TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 4 - TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它以&amp;lt;li&amp;gt;标签列出所有项目 ,以便它呈现为在最终的HTML的列表的块。 this.props.children预见包含传递给TodoListItem标签从其父组件的所有后代。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LISTITEM] */
var TodoListItem = React.createClass({
    render: function(){
        return (
            &amp;lt;li data-id={this.props.value} key={this.props.value}&amp;gt;{this.props.children}&amp;lt;/li&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-5-TodoForm&quot;&gt;&lt;a href=&quot;#Component-5-TodoForm&quot; class=&quot;headerlink&quot; title=&quot;Component 5 - TodoForm&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 5 - TodoForm&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它包含一个文本字段后跟一个按钮，触发在待办事项列表中的另外的项目。此组件将保持当前的项目在文本框输入并且两者都使用onChange事件保持同步。由于作为提交按钮被按下很快，该项目被传递给其父组件，焦点返回到文本框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO FORM] */
var TodoForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
            item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group col-sm-10&amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;todoField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Render-TodoApp&quot;&gt;&lt;a href=&quot;#Render-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Render - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Render - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;最后一步是绘制 TodoApp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReactDOM.render(
        &amp;lt;TodoApp/&amp;gt;,
        document.getElementById(&amp;apos;todo&amp;apos;)
      );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你完成，你可以看到 TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Step1.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step1/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;这是我首次尝试用React-JS建立一个待办事项应用。React-JS是一个JavaScript库，用于构建用户界面，主要是因为它是由Facebook的建立。我们将学习如何使用。&lt;/p&gt;
&lt;p&gt;让我们开始.您可以按照从GitHub库的步骤本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(5)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/</id>
    <published>2016-07-20T17:54:06.000Z</published>
    <updated>2016-07-21T04:59:28.984Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step is to allows users to change the sequence of ToDoListItem using drag and drop (DnD)&lt;/p&gt;
&lt;p&gt;We will allow user to sort an array using drag and drop. We create li element first. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDoList&quot;&gt;&lt;a href=&quot;#Component-1-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We create the DragStar function, DragEnd function and DragOver function to implement (Drag and drop)DnD process. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragStart: function(e){
    this.dragged = e.currentTarget;
    e.dataTransfer.effectAllowed = &amp;apos;move&amp;apos;;
},
DragEnd: function(e){
    this.dragged.style.display=&amp;quot;&amp;quot;;
    var IshasNode = false

    Array.prototype.forEach.call (this.dragged.parentNode.childNodes, function (node) {
        if(node.className==&amp;quot;placeholder&amp;quot;)
                        IshasNode = true;

    } );
    if(!IshasNode)
    return;
    this.dragged.parentNode.removeChild(placeholder);
    var data = this.props.items;
    var from = Number(this.dragged.dataset.id);
    var to = Number(this.over.dataset.id);
    if(from &amp;lt; to) to--;
    if(this.nodePlacement == &amp;quot;after&amp;quot;) to++;
    data.splice(to, 0, data.splice(from, 1)[0]);
    this.setState({data: data});    
},
DragOver: function(e) {

    e.preventDefault();
    this.dragged.style.display = &amp;quot;none&amp;quot;;

    if(e.target.className == &amp;quot;placeholder&amp;quot;) return;
    this.over = e.target;
    // Inside the dragOver method
    var relY = e.clientY - this.over.offsetTop;
    var height = this.over.offsetHeight / 2;
    var parent = e.target.parentNode;

    if(relY &amp;gt; height) {
      this.nodePlacement = &amp;quot;after&amp;quot;;
      parent.insertBefore(placeholder, e.target.nextElementSibling);
    }
    else if(relY &amp;lt; height) {
      this.nodePlacement = &amp;quot;before&amp;quot;
      parent.insertBefore(placeholder, e.target);
    }
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragStar function and DragEnd function are bound to ToDoListItem component. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onDragEnd={this.DragEnd}
onDragStart={this.DragStart} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragOver function are bound to ul element. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul onDragOver={this.DragOver}&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoListItem&quot;&gt;&lt;a href=&quot;#Component-2-ToDoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We create DragEndHandler function and DragStartHandler function to trigger parent’s event and also bind to li element. We also need to set the draggable = true attribute on the li element. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragEndHandler : function(e){
    this.props.onDragEnd(e);
},
DragStartHandler : function(e){
    this.props.onDragStart(e);
},
render: function(){
    var _style = &amp;quot;line-through&amp;quot;;
    if(!this.props.children.isDone)
    _style =&amp;quot;none&amp;quot;;
    return (
      &amp;lt;li data-id={this.props.value} 
                key={this.props.value} draggable=&amp;quot;true&amp;quot; onDragEnd={this.DragEndHandler}
            onDragStart={this.DragStartHandler}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHandler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.ChangeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you finish , you can see the TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/19/React-js-todo-list-sortable/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step is to allows users to change the sequence of ToDoListItem using drag and drop (DnD)&lt;/p&gt;
&lt;p&gt;We will allow user to sort an array using drag and drop. We create li element first. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(4)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/</id>
    <published>2016-07-20T17:53:54.000Z</published>
    <updated>2016-07-21T04:59:37.739Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step will be the ability to add multiple todos. For example we might have a list that is used only for grocey lists, the other might be a list of planned blog posts or a list of the things to do todays. That’s why it’s important to have ability to sort the todos in different lists. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Catelog-Form&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Catelog-Form&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDo Catelog Form&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDo Catelog Form&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It contains a text field followed by a button to trigger the addition of catelog in the Todo list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatalogForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
          item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group &amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;newTodoCatalogField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
              &amp;lt;/div&amp;gt;

        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDo-Catelog&quot;&gt;&lt;a href=&quot;#Component-2-ToDo-Catelog&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDo Catelog&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDo Catelog&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It will show all todos list. &lt;/p&gt;
&lt;p&gt;selectedID is the variable which will store the current todos being shown. The todos-list will update according to selectedID.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatelog  = React.createClass({
    changeTodo : function(e){
        this.props.onSelected( e.currentTarget.dataset.id);
    },
    checkActive:function(i){
        if (i == this.props.selectedID)
        {
            return &amp;quot;list-group-item active&amp;quot;;
        }
        else
        {
            return &amp;quot;list-group-item &amp;quot;;
        }
    },
    render: function(){    
        var selectedID = this .props.selectedID;
        var allitems =this.props.Todos;

        return &amp;lt;div className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            allitems.map(function(item,i){ 
            var _class = &amp;quot;&amp;quot;;
            if (i == this.props.selectedID)
            {
                _class =  &amp;quot;list-group-item active&amp;quot;;
            }
            else
            {
                _class =  &amp;quot;list-group-item &amp;quot;;
            }
            return(
                 &amp;lt;a href=&amp;quot;#&amp;quot; key={i} data-id={i} className={_class} onClick={this.changeTodo} &amp;gt;&amp;lt;span className=&amp;quot;badge&amp;quot; &amp;gt;{item.items.length}&amp;lt;/span&amp;gt;{item.name}&amp;lt;/a&amp;gt;
            )
        },this)}&amp;lt;/div&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-3-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 3  - ToDoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3  - ToDoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We will redeclare the return value of getInitialState function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
        return {Todo:[{name:&amp;quot;parimary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;aaaa&amp;apos;,isDone:true},{item:&amp;apos;dddd&amp;apos;,isDone:true}
        ]},{name:&amp;quot;Secondary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;Todo itmd #3&amp;apos;,isDone:true}
        ]}],filter:[{keyword:&amp;apos;&amp;apos;,Status:&amp;quot;SHOW_ALL&amp;quot;}],selectedCatelog:&amp;quot;0&amp;quot;};
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We create AddCatelog function and setSelectedCatalog function. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Here is the Add Catelog function 
AddCatelog: function(newCatalog){
    var Catalog = {name:newCatalog,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false}]};
    var newtodo = this.state.Todo.concat([Catalog]);
    this.setState({
        Todo: newtodo
    });
},
setSelectedCatalog: function(index){
    this.state.selectedCatelog = index;
    this.setState({
        selectedCatelog: index
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the meantime, we also need to modify updateItems function and deleteItem function. Updating Item or Deleting Item based on the selectedCatelog. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;updateItems: function(newItem){    
        var item = {item:newItem,isDone:false};
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.concat([item]);
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
    },
deleteItem : function(index){
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.slice(); //copy array
        allItems.splice(index, 1); //remove element
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; At last, We insert ToDoCatalogForm Component and ToDoCatelog Component into render function and pass items based on selectedCatelog.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function(){
    return (
        &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-3&amp;quot;&amp;gt;
                &amp;lt;ToDoCatalogForm onFormSubmit = {this.AddCatelog} /&amp;gt;
                &amp;lt;ToDoCatelog selectedID = {this.state.selectedCatelog} onSelected={this.setSelectedCatalog} Todos = {this.state.Todo} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-6&amp;quot;&amp;gt;
                &amp;lt;ToDoBanner/&amp;gt;
                &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
                &amp;lt;ToDoForm onFormSubmit = {this.updateItems} /&amp;gt;
                &amp;lt;ToDoList  items = {this.state.Todo[this.state.selectedCatelog].items} filter = {this.state.filter} onDelete={this.deleteItem}/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now have following screenshot&lt;br&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step5/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/19/React-js-todo-list-sortable/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step will be the ability to add multiple todos. For example we might have a list that is used only for grocey lists, the other might be a list of planned blog posts or a list of the things to do todays. That’s why it’s important to have ability to sort the todos in different lists. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(3)</title>
    <link href="https://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/"/>
    <id>https://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/</id>
    <published>2016-07-20T10:16:46.000Z</published>
    <updated>2016-07-21T04:59:44.967Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we have a lot of todos, it becomes difficult to search through them and to find a particular todo. It also becomes easier to see all the completed and incompleted tasks at once. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FILTER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Filter&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Filter&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - ToDo Filter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - ToDo Filter&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;This component contains the filter and search bar.  Following is the code for Filter Component. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoFilter = React.createClass({
    isActive:function(value){
        return &amp;apos;btn &amp;apos;+((value===this.props.filter[0].Status) ?&amp;apos;btn-primary&amp;apos;:&amp;apos;default&amp;apos;);
    },
    render: function(){
        var onFilter1 = this.props.onFilter;
        var onSearch1 = this.props.onSearch;
        return(
                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-7&amp;quot;&amp;gt;
                        &amp;lt;div id=&amp;quot;todo-filter&amp;quot; className=&amp;quot;input-group&amp;quot;&amp;gt;
                            &amp;lt;span className=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                                &amp;lt;button className=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span className=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                                &amp;lt;/span&amp;gt;
                                &amp;lt;input  type=&amp;quot;search&amp;quot; className=&amp;quot;form-control&amp;quot; ref=&amp;apos;filter&amp;apos; onChange={onSearch1} placeholder=&amp;quot;Search&amp;quot; &amp;gt;&amp;lt;/input&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-5&amp;quot;&amp;gt;
                        &amp;lt;ul className=&amp;quot;nav nav-pills todo-filter&amp;quot;&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;SHOW_ALL&amp;apos;)} value=&amp;quot;SHOW_ALL&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;false&amp;apos;)} value=&amp;quot;false&amp;quot;&amp;gt;Incomplete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                             &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;true&amp;apos;)} value=&amp;quot;true&amp;quot;&amp;gt;Complete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
        ); 
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-2-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - ToDoApp &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - ToDoApp &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;In ToDoApp, we create filterItem function and searchItem function to save input value and then add ToDoFilter into render function. &lt;/p&gt;
&lt;p&gt;Here’s the code :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filterItem : function(e){
    this.state.filter[0].Status = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
searchItem : function(e){
    this.state.filter[0].keyword = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
render: function(){
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;ToDoBanner/&amp;gt;
            &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
            &amp;lt;ToDoForm onFormSubmit={this.updateItems} /&amp;gt;
            &amp;lt;ToDoList items={this.state.items} filter = {this.state.filter}  onDelete={this.deleteItem} /&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoList&quot;&gt;&lt;a href=&quot;#Component-3-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - ToDoList &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - ToDoList &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Filter the todo list based on user input. I use the filter Method to filter todo list. &lt;/p&gt;
&lt;p&gt;I use the indexOf() Method to implement Searching function. The indexOf() method return -1 if the keyword to search for never occurs. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {    
    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
    // Here is the filter function 
    var allitems = this.props.items;

    var status = this.props.filter[0].Status;
    switch (status){
        case &amp;apos;false&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; !t.isDone)
         break;
         case &amp;apos;true&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; t.isDone)
    };

    // Here is the search function 
    var queryText = this.props.filter[0].keyword;

    if(queryText){
        var queryResult=[];
        allitems.forEach(function(item){
            if(item.item.toLowerCase().indexOf(queryText)!=-1)
            queryResult.push(item);
        });
        return &amp;lt;ul&amp;gt;{queryResult.map(createItem,this)}&amp;lt;/ul&amp;gt;;
    }

    return &amp;lt;ul&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now have following screenshot&lt;br&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step4/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/19/React-js-todo-list-sortable/&quot;&gt;Building a Todo app with React.js (1) - A simple todos list &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-2/&quot;&gt;Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/&quot;&gt;Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/&quot;&gt;Building a Todo app with React.js (4) - Multiple Todos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##&lt;a href=&quot;http://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/&quot;&gt;Building a Todo app with React.js (5) - Sort item&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we have a lot of todos, it becomes difficult to search through them and to find a particular todo. It also becomes easier to see all the completed and incompleted tasks at once. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FILTER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
</feed>
