<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kenneth</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kennethhutw.github.io/"/>
  <updated>2016-07-21T04:43:15.174Z</updated>
  <id>https://kennethhutw.github.io/</id>
  
  <author>
    <name>Kenneth_hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-js-todo-list-sortable-cn(5)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-5/</id>
    <published>2016-07-21T02:24:07.000Z</published>
    <updated>2016-07-21T04:43:15.174Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步是允许用户使用拖放来改变ToDoListItem的序列（ DND）&lt;/p&gt;
&lt;p&gt;我们将允许用户进行排序使用拖放一个数组。我们首先创建li元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDoList&quot;&gt;&lt;a href=&quot;#Component-1-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们创建DragStar功能， DragEnd功能的dragover函数来实现（拖放）的DnD过程。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragStart: function(e){
    this.dragged = e.currentTarget;
    e.dataTransfer.effectAllowed = &amp;apos;move&amp;apos;;
},
DragEnd: function(e){
    this.dragged.style.display=&amp;quot;&amp;quot;;
    var IshasNode = false

    Array.prototype.forEach.call (this.dragged.parentNode.childNodes, function (node) {
        if(node.className==&amp;quot;placeholder&amp;quot;)
                        IshasNode = true;

    } );
    if(!IshasNode)
    return;
    this.dragged.parentNode.removeChild(placeholder);
    var data = this.props.items;
    var from = Number(this.dragged.dataset.id);
    var to = Number(this.over.dataset.id);
    if(from &amp;lt; to) to--;
    if(this.nodePlacement == &amp;quot;after&amp;quot;) to++;
    data.splice(to, 0, data.splice(from, 1)[0]);
    this.setState({data: data});    
},
DragOver: function(e) {

    e.preventDefault();
    this.dragged.style.display = &amp;quot;none&amp;quot;;

    if(e.target.className == &amp;quot;placeholder&amp;quot;) return;
    this.over = e.target;
    // Inside the dragOver method
    var relY = e.clientY - this.over.offsetTop;
    var height = this.over.offsetHeight / 2;
    var parent = e.target.parentNode;

    if(relY &amp;gt; height) {
      this.nodePlacement = &amp;quot;after&amp;quot;;
      parent.insertBefore(placeholder, e.target.nextElementSibling);
    }
    else if(relY &amp;lt; height) {
      this.nodePlacement = &amp;quot;before&amp;quot;
      parent.insertBefore(placeholder, e.target);
    }
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragStar功能和DragEnd功能被绑定到ToDoListItem组件。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onDragEnd={this.DragEnd}
onDragStart={this.DragStart} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dragover功能被绑定到UI元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul onDragOver={this.DragOver}&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoListItem&quot;&gt;&lt;a href=&quot;#Component-2-ToDoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们创造DragEndHandler功能， DragStartHandler功能触发父的事件，并绑定到li元素。我们还需要设置 li元素上draggable = true属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragEndHandler : function(e){
    this.props.onDragEnd(e);
},
DragStartHandler : function(e){
    this.props.onDragStart(e);
},
render: function(){
    var _style = &amp;quot;line-through&amp;quot;;
    if(!this.props.children.isDone)
    _style =&amp;quot;none&amp;quot;;
    return (
      &amp;lt;li data-id={this.props.value} 
                key={this.props.value} draggable=&amp;quot;true&amp;quot; onDragEnd={this.DragEndHandler}
            onDragStart={this.DragStartHandler}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHandler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.ChangeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步是允许用户使用拖放来改变ToDoListItem的序列（ DND）&lt;/p&gt;
&lt;p&gt;我们将允许用户进行排序使用拖放一个数组。我们首先创建li元素。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable-cn(4)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-4/</id>
    <published>2016-07-21T02:23:59.000Z</published>
    <updated>2016-07-21T04:39:52.218Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步将是添加多个待办事项的能力。例如，我们可能有仅用于grocey列出清单，其他的可能是计划的博客文章列表或的事情要做今天的名单。这就是为什么有在不同的列表中的待办事项进行排序能力是很重要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Catelog-Form&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Catelog-Form&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDo Catelog Form&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDo Catelog Form&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它包含一个文本字段后跟一个按钮来触发待办事项列表中增加新的代办事项的目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatalogForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
          item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group &amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;newTodoCatalogField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
              &amp;lt;/div&amp;gt;

        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDo-Catelog&quot;&gt;&lt;a href=&quot;#Component-2-ToDo-Catelog&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDo Catelog&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDo Catelog&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它会显示所有的待办事项列表。selectedID是将当前存储待办事项被示出的变量，在待办事项列表会根据selectedID更新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatelog  = React.createClass({
    changeTodo : function(e){
        this.props.onSelected( e.currentTarget.dataset.id);
    },
    checkActive:function(i){
        if (i == this.props.selectedID)
        {
            return &amp;quot;list-group-item active&amp;quot;;
        }
        else
        {
            return &amp;quot;list-group-item &amp;quot;;
        }
    },
    render: function(){    
        var selectedID = this .props.selectedID;
        var allitems =this.props.Todos;

        return &amp;lt;div className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            allitems.map(function(item,i){ 
            var _class = &amp;quot;&amp;quot;;
            if (i == this.props.selectedID)
            {
                _class =  &amp;quot;list-group-item active&amp;quot;;
            }
            else
            {
                _class =  &amp;quot;list-group-item &amp;quot;;
            }
            return(
                 &amp;lt;a href=&amp;quot;#&amp;quot; key={i} data-id={i} className={_class} onClick={this.changeTodo} &amp;gt;&amp;lt;span className=&amp;quot;badge&amp;quot; &amp;gt;{item.items.length}&amp;lt;/span&amp;gt;{item.name}&amp;lt;/a&amp;gt;
            )
        },this)}&amp;lt;/div&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-3-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 3  - ToDoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3  - ToDoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们将重新声明getInitialState函数的返回值，把项目归纳到目录下面并增加一个selectedCatelog 变数来保存目前的目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
        return {Todo:[{name:&amp;quot;parimary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;aaaa&amp;apos;,isDone:true},{item:&amp;apos;dddd&amp;apos;,isDone:true}
        ]},{name:&amp;quot;Secondary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;Todo itmd #3&amp;apos;,isDone:true}
        ]}],filter:[{keyword:&amp;apos;&amp;apos;,Status:&amp;quot;SHOW_ALL&amp;quot;}],selectedCatelog:&amp;quot;0&amp;quot;};
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们创造AddCatelog功能和setSelectedCatalog功能。 AddCatelog功能用来新增新的代办事项的目录，而setSelectedCatalog功能是用来保存现在查看那一个目录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Here is the Add Catelog function 
AddCatelog: function(newCatalog){
    var Catalog = {name:newCatalog,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false}]};
    var newtodo = this.state.Todo.concat([Catalog]);
    this.setState({
        Todo: newtodo
    });
},
setSelectedCatalog: function(index){
    this.state.selectedCatelog = index;
    this.setState({
        selectedCatelog: index
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在此同时，我们还需要修改updateItems功能和deleteItem功能。更新项目或删除项目都是根据selectedCatelog来进行的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;updateItems: function(newItem){    
        var item = {item:newItem,isDone:false};
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.concat([item]);
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
    },
deleteItem : function(index){
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.slice(); //copy array
        allItems.splice(index, 1); //remove element
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，我们插入ToDoCatalogForm组件和ToDoCatelog组件到渲染功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function(){
    return (
        &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-3&amp;quot;&amp;gt;
                &amp;lt;ToDoCatalogForm onFormSubmit = {this.AddCatelog} /&amp;gt;
                &amp;lt;ToDoCatelog selectedID = {this.state.selectedCatelog} onSelected={this.setSelectedCatalog} Todos = {this.state.Todo} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-6&amp;quot;&amp;gt;
                &amp;lt;ToDoBanner/&amp;gt;
                &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
                &amp;lt;ToDoForm onFormSubmit = {this.updateItems} /&amp;gt;
                &amp;lt;ToDoList  items = {this.state.Todo[this.state.selectedCatelog].items} filter = {this.state.filter} onDelete={this.deleteItem}/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step5/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下一步将是添加多个待办事项的能力。例如，我们可能有仅用于grocey列出清单，其他的可能是计划的博客文章列表或的事情要做今天的名单。这就是为什么有在不同的列表中的待办事项进行排序能力是很重要的。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable-cn(3)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-3/</id>
    <published>2016-07-21T02:23:51.000Z</published>
    <updated>2016-07-21T04:29:14.944Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们有很多待办事项，很难通过它们进行搜索，并找到一个特定的待办事项。它也变得更容易看到所有的完成，未完成任务的一次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - **TODO FILTER**
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Filter&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Filter&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - ToDo Filter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - ToDo Filter&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这个组件包含过滤器和搜索栏。以下是组件的代码。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoFilter = React.createClass({
    isActive:function(value){
        return &amp;apos;btn &amp;apos;+((value===this.props.filter[0].Status) ?&amp;apos;btn-primary&amp;apos;:&amp;apos;default&amp;apos;);
    },
    render: function(){
        var onFilter1 = this.props.onFilter;
        var onSearch1 = this.props.onSearch;
        return(
                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-7&amp;quot;&amp;gt;
                        &amp;lt;div id=&amp;quot;todo-filter&amp;quot; className=&amp;quot;input-group&amp;quot;&amp;gt;
                            &amp;lt;span className=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                                &amp;lt;button className=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span className=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                                &amp;lt;/span&amp;gt;
                                &amp;lt;input  type=&amp;quot;search&amp;quot; className=&amp;quot;form-control&amp;quot; ref=&amp;apos;filter&amp;apos; onChange={onSearch1} placeholder=&amp;quot;Search&amp;quot; &amp;gt;&amp;lt;/input&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-5&amp;quot;&amp;gt;
                        &amp;lt;ul className=&amp;quot;nav nav-pills todo-filter&amp;quot;&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;SHOW_ALL&amp;apos;)} value=&amp;quot;SHOW_ALL&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;false&amp;apos;)} value=&amp;quot;false&amp;quot;&amp;gt;Incomplete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                             &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;true&amp;apos;)} value=&amp;quot;true&amp;quot;&amp;gt;Complete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
        ); 
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-2-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - ToDoApp &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - ToDoApp &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;在ToDoApp ，我们创建的FilterItem功能， searchItem功能，保存输入值，然后添加到ToDoFilter渲染功能。&lt;/p&gt;
&lt;p&gt;Here’s the code :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filterItem : function(e){
    this.state.filter[0].Status = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
searchItem : function(e){
    this.state.filter[0].keyword = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
render: function(){
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;ToDoBanner/&amp;gt;
            &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
            &amp;lt;ToDoForm onFormSubmit={this.updateItems} /&amp;gt;
            &amp;lt;ToDoList items={this.state.items} filter = {this.state.filter}  onDelete={this.deleteItem} /&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoList&quot;&gt;&lt;a href=&quot;#Component-3-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - ToDoList &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - ToDoList &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;过滤器方面，用的React-js的filter方法来实现过滤功能。 过滤器将根据用户输入的待办事项列表，来过滤的待办事项列表。 &lt;/p&gt;
&lt;p&gt;搜索功能方面，我用的indexOf （）方法来实现搜索功能。该的indexOf （）方法返回-1，如果关键字搜索不会发生。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {    
    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
    // Here is the filter function 
    var allitems = this.props.items;

    var status = this.props.filter[0].Status;
    switch (status){
        case &amp;apos;false&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; !t.isDone)
         break;
         case &amp;apos;true&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; t.isDone)
    };

    // Here is the search function 
    var queryText = this.props.filter[0].keyword;

    if(queryText){
        var queryResult=[];
        allitems.forEach(function(item){
            if(item.item.toLowerCase().indexOf(queryText)!=-1)
            queryResult.push(item);
        });
        return &amp;lt;ul&amp;gt;{queryResult.map(createItem,this)}&amp;lt;/ul&amp;gt;;
    }

    return &amp;lt;ul&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step4/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果我们有很多待办事项，很难通过它们进行搜索，并找到一个特定的待办事项。它也变得更容易看到所有的完成，未完成任务的一次。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - **TODO FILTER**
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable-cn(2)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-2/</id>
    <published>2016-07-21T02:23:40.000Z</published>
    <updated>2016-07-21T04:07:58.479Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这节，我们要改进Components，并删除项目。让使用者可以删除项目和当项目项目已经完成，项目的复选框可以被标记。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Redeclare-Items&quot;&gt;&lt;a href=&quot;#Redeclare-Items&quot; class=&quot;headerlink&quot; title=&quot; Redeclare Items&quot;&gt;&lt;/a&gt;&lt;strong&gt; Redeclare Items&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;为了添加复选框，我们必须重新定义项和修改updateItems功能。阵列中的每个项目都会有一个项目，一个布尔值，特定的任务是否剩余或已完成。布尔值将绑定到TodoListItem复选框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
    return {items:[{item:&amp;apos;Todo itme #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itme #2&amp;apos;,isDone:true}]};
},
updateItems: function(newItem){
    var item = {item:newItem,isDone:false};
    var allItems = this.state.items.concat([item]);
    this.setState({
        items: allItems
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Improve-TodoListItem&quot;&gt;&lt;a href=&quot;#Improve-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Improve TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Improve TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;我们将添加到复选框，并TodoListItem绑定事件 - changeHandler 。在changeHandler ，它将更新所选项目的状态。当渲染组件，它会看到是否应用样式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoListItem = React.createClass({
        changeHandler: function(e){
            this.setState({
              value: e.target.checked
            });
            this.props.children.isDone = e.target.checked;
        },
        render: function(){
            var _style = &amp;quot;line-through&amp;quot;;
            if(!this.props.children.isDone)
            _style =&amp;quot;none&amp;quot;;
            return (
              &amp;lt;li data-id={this.props.value} 
                        key={this.props.value}&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当您选中或取消选中该单选框，你将看到如何变化。你现在应该有下面的截图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;h1 id=&quot;Remove-TodoListItem&quot;&gt;&lt;a href=&quot;#Remove-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Remove TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Remove TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step3.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们将了解如何将功能绑定到一个组件。我们应该能够删除旧的TodoListItem&lt;/p&gt;
&lt;p&gt;在TodoApp组件，我们创建了一个deleteItem功能，绑定此功能到TodoList的组件。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deleteItem : function(index){
            var newData = this.state.items.slice(); //copy array
            newData.splice(index, 1); //remove element
            this.setState({
                items: newData
            });
        },
render: function(){
            return (
                &amp;lt;div&amp;gt;
                    &amp;lt;ToDoBanner/&amp;gt;
                    &amp;lt;TodoForm onFormSubmit={this.updateItems} /&amp;gt;
                    &amp;lt;TodoList items={this.state.items} onDelete={this.deleteItem} /&amp;gt;
                &amp;lt;/div&amp;gt;
            );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在TodoList组件，也创造了删除功能并绑定到TodoListITem 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoList = React.createClass({
    Remove: function(e){
       this.props.onDelete(e);
    },
    render: function() {
        var createItem = function(itemText, i) {
        return (
                &amp;lt;TodoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt;
              );
          };
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem, this)}&amp;lt;/ul&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 TodoListItem 组件 , 添加按钮到li元素，并创建一个remove函数绑定到这个按钮。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RemoveHandler: function(){
       this.props.onRemove(this.props.value);
},
render: function(){
        var _style = &amp;quot;line-through&amp;quot;;
        if(!this.props.children.isDone)
        _style =&amp;quot;none&amp;quot;;
        return (
          &amp;lt;li data-id={this.props.value} 
                    key={this.props.value}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHndler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
        );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你现在应该有下面的截图&lt;br&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step3/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这节，我们要改进Components，并删除项目。让使用者可以删除项目和当项目项目已经完成，项目的复选框可以被标记。&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable-cn(1)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-cn-1/</id>
    <published>2016-07-21T02:23:24.000Z</published>
    <updated>2016-07-21T04:46:16.756Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;这是我首次尝试用React-JS建立一个待办事项应用。React-JS是一个JavaScript库，用于构建用户界面，主要是因为它是由Facebook的建立。我们将学习如何使用。&lt;/p&gt;
&lt;p&gt;让我们开始.您可以按照从GitHub库的步骤本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在本文中，我们将使用建立一个非常的应用程序Facebook的 &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react.js&lt;/a&gt;. 如果你不熟悉这个库，那么我会强烈建议阅读使用React构建了完整的&lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comment system&lt;/a&gt;教程.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;建设React.js应用的根本出路在于您的应用程序分解成一堆有用的组件，然后你的工作方式向后分别构建它们。一旦各个部件都是准备就绪，可以它们连接起来，以在组件之间交换数据。例如，我们的Todo应用程序可以分解为以下组件和层次结构，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Basic-Skeleton&quot;&gt;&lt;a href=&quot;#Basic-Skeleton&quot; class=&quot;headerlink&quot; title=&quot;Basic Skeleton&quot;&gt;&lt;/a&gt;&lt;strong&gt;Basic Skeleton&lt;/strong&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ ... }); 
    /* [TODO BANNER] &amp;amp;&amp;amp; [TODO LIST] */ 
    var TodoBanner = React.createClass({ ... });
    /* [TODO FORM] */ 
    var TodoForm = React.createClass({ ... });                     
    var TodoList = React.createClass({ ... }); 
        /* [TODO LIST ITEM] */ 
        var TodoListItem = React.createClass({ ... }); 

React.render(&amp;lt;TodoApp/&amp;gt;, document.body);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-1-TodoApp&quot;&gt;&lt;a href=&quot;#Component-1-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;这个组件将持有将由它的子组件以各种形式来共享待办事项列表。 &lt;em&gt;items&lt;/em&gt;的初始状态将是一个空白列表。该列表将尽快作为一个新的项目通过&lt;em&gt;TodoForm&lt;/em&gt;组件添加更新。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ 
    getInitialState: function(){ 
        return {items: []}; 
    }, 
    updateItems: function(newItem){ 
        var allItems = this.state.items.concat([newItem]); 
        this.setState({items: allItems});
    }, 
    render: function(){ 
        return ( 
            &amp;lt;div&amp;gt; 
                &amp;lt;TodoBanner/&amp;gt;
                &amp;lt;TodoForm onFormSubmit={this.updateItems}/&amp;gt;                                 
                &amp;lt;TodoList items={this.state.items}/&amp;gt;     
            &amp;lt;/div&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-TodoBanner&quot;&gt;&lt;a href=&quot;#Component-2-TodoBanner&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - TodoBanner&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - TodoBanner&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它只是包含了一个标题标签。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO BANNER] */ 
var TodoBanner = React.createClass({ 
    render: function(){ 
        return ( 
        &amp;lt;h3&amp;gt;TODO....react.js&amp;lt;/h3&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-TodoList&quot;&gt;&lt;a href=&quot;#Component-3-TodoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - TodoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - TodoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它接受的项目的列表和环绕一个TodoListItem组件的每个项目。最终的结果，然后以&amp;lt;ul&amp;gt;标签包裹。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LIST] */ 
var TodoList = React.createClass({ 
    render: function() { 
    var createItem = function(itemText) { 
        return ( 
            &amp;lt;TodoListItem&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt; 
            );
        }; 
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem)}&amp;lt;/ul&amp;gt;;
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-4-TodoListItem&quot;&gt;&lt;a href=&quot;#Component-4-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 4 - TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 4 - TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它以&amp;lt;li&amp;gt;标签列出所有项目 ,以便它呈现为在最终的HTML的列表的块。 this.props.children预见包含传递给TodoListItem标签从其父组件的所有后代。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LISTITEM] */
var TodoListItem = React.createClass({
    render: function(){
        return (
            &amp;lt;li data-id={this.props.value} key={this.props.value}&amp;gt;{this.props.children}&amp;lt;/li&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-5-TodoForm&quot;&gt;&lt;a href=&quot;#Component-5-TodoForm&quot; class=&quot;headerlink&quot; title=&quot;Component 5 - TodoForm&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 5 - TodoForm&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;它包含一个文本字段后跟一个按钮，触发在待办事项列表中的另外的项目。此组件将保持当前的项目在文本框输入并且两者都使用onChange事件保持同步。由于作为提交按钮被按下很快，该项目被传递给其父组件，焦点返回到文本框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO FORM] */
var TodoForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
            item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group col-sm-10&amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;todoField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Render-TodoApp&quot;&gt;&lt;a href=&quot;#Render-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Render - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Render - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;最后一步是绘制 TodoApp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReactDOM.render(
        &amp;lt;TodoApp/&amp;gt;,
        document.getElementById(&amp;apos;todo&amp;apos;)
      );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当你完成，你可以看到 TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Step1.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step1/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;这是我首次尝试用React-JS建立一个待办事项应用。React-JS是一个JavaScript库，用于构建用户界面，主要是因为它是由Facebook的建立。我们将学习如何使用。&lt;/p&gt;
&lt;p&gt;让我们开始.您可以按照从GitHub库的步骤本教程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(5)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-5/</id>
    <published>2016-07-20T17:54:06.000Z</published>
    <updated>2016-07-21T04:41:49.435Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step is to allows users to change the sequence of ToDoListItem using drag and drop (DnD)&lt;/p&gt;
&lt;p&gt;We will allow user to sort an array using drag and drop. We create li element first. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDoList&quot;&gt;&lt;a href=&quot;#Component-1-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We create the DragStar function, DragEnd function and DragOver function to implement (Drag and drop)DnD process. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragStart: function(e){
    this.dragged = e.currentTarget;
    e.dataTransfer.effectAllowed = &amp;apos;move&amp;apos;;
},
DragEnd: function(e){
    this.dragged.style.display=&amp;quot;&amp;quot;;
    var IshasNode = false

    Array.prototype.forEach.call (this.dragged.parentNode.childNodes, function (node) {
        if(node.className==&amp;quot;placeholder&amp;quot;)
                        IshasNode = true;

    } );
    if(!IshasNode)
    return;
    this.dragged.parentNode.removeChild(placeholder);
    var data = this.props.items;
    var from = Number(this.dragged.dataset.id);
    var to = Number(this.over.dataset.id);
    if(from &amp;lt; to) to--;
    if(this.nodePlacement == &amp;quot;after&amp;quot;) to++;
    data.splice(to, 0, data.splice(from, 1)[0]);
    this.setState({data: data});    
},
DragOver: function(e) {

    e.preventDefault();
    this.dragged.style.display = &amp;quot;none&amp;quot;;

    if(e.target.className == &amp;quot;placeholder&amp;quot;) return;
    this.over = e.target;
    // Inside the dragOver method
    var relY = e.clientY - this.over.offsetTop;
    var height = this.over.offsetHeight / 2;
    var parent = e.target.parentNode;

    if(relY &amp;gt; height) {
      this.nodePlacement = &amp;quot;after&amp;quot;;
      parent.insertBefore(placeholder, e.target.nextElementSibling);
    }
    else if(relY &amp;lt; height) {
      this.nodePlacement = &amp;quot;before&amp;quot;
      parent.insertBefore(placeholder, e.target);
    }
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragStar function and DragEnd function are bound to ToDoListItem component. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onDragEnd={this.DragEnd}
onDragStart={this.DragStart} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DragOver function are bound to ul element. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;ul onDragOver={this.DragOver}&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoListItem&quot;&gt;&lt;a href=&quot;#Component-2-ToDoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We create DragEndHandler function and DragStartHandler function to trigger parent’s event and also bind to li element. We also need to set the draggable = true attribute on the li element. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DragEndHandler : function(e){
    this.props.onDragEnd(e);
},
DragStartHandler : function(e){
    this.props.onDragStart(e);
},
render: function(){
    var _style = &amp;quot;line-through&amp;quot;;
    if(!this.props.children.isDone)
    _style =&amp;quot;none&amp;quot;;
    return (
      &amp;lt;li data-id={this.props.value} 
                key={this.props.value} draggable=&amp;quot;true&amp;quot; onDragEnd={this.DragEndHandler}
            onDragStart={this.DragStartHandler}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHandler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.ChangeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you finish , you can see the TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-5-sort-item&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-5-sort-item&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (5) - sort item&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (5) - sort item&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step6.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step is to allows users to change the sequence of ToDoListItem using drag and drop (DnD)&lt;/p&gt;
&lt;p&gt;We will allow user to sort an array using drag and drop. We create li element first. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var placeholder = document.createElement(&amp;quot;li&amp;quot;);
    placeholder.className = &amp;quot;placeholder&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(4)</title>
    <link href="https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/"/>
    <id>https://kennethhutw.github.io/2016/07/21/React-js-todo-list-sortable-4/</id>
    <published>2016-07-20T17:53:54.000Z</published>
    <updated>2016-07-21T02:04:19.787Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step will be the ability to add multiple todos. For example we might have a list that is used only for grocey lists, the other might be a list of planned blog posts or a list of the things to do todays. That’s why it’s important to have ability to sort the todos in different lists. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Catelog-Form&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Catelog-Form&quot; class=&quot;headerlink&quot; title=&quot;Component 1  - ToDo Catelog Form&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1  - ToDo Catelog Form&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It contains a text field followed by a button to trigger the addition of catelog in the Todo list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatalogForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
          item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group &amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;newTodoCatalogField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
              &amp;lt;/div&amp;gt;

        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDo-Catelog&quot;&gt;&lt;a href=&quot;#Component-2-ToDo-Catelog&quot; class=&quot;headerlink&quot; title=&quot;Component 2  - ToDo Catelog&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2  - ToDo Catelog&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It will show all todos list. &lt;/p&gt;
&lt;p&gt;selectedID is the variable which will store the current todos being shown. The todos-list will update according to selectedID.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoCatelog  = React.createClass({
    changeTodo : function(e){
        this.props.onSelected( e.currentTarget.dataset.id);
    },
    checkActive:function(i){
        if (i == this.props.selectedID)
        {
            return &amp;quot;list-group-item active&amp;quot;;
        }
        else
        {
            return &amp;quot;list-group-item &amp;quot;;
        }
    },
    render: function(){    
        var selectedID = this .props.selectedID;
        var allitems =this.props.Todos;

        return &amp;lt;div className=&amp;quot;list-group&amp;quot;&amp;gt;
        {
            allitems.map(function(item,i){ 
            var _class = &amp;quot;&amp;quot;;
            if (i == this.props.selectedID)
            {
                _class =  &amp;quot;list-group-item active&amp;quot;;
            }
            else
            {
                _class =  &amp;quot;list-group-item &amp;quot;;
            }
            return(
                 &amp;lt;a href=&amp;quot;#&amp;quot; key={i} data-id={i} className={_class} onClick={this.changeTodo} &amp;gt;&amp;lt;span className=&amp;quot;badge&amp;quot; &amp;gt;{item.items.length}&amp;lt;/span&amp;gt;{item.name}&amp;lt;/a&amp;gt;
            )
        },this)}&amp;lt;/div&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-3-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 3  - ToDoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3  - ToDoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We will redeclare the return value of getInitialState function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
        return {Todo:[{name:&amp;quot;parimary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;aaaa&amp;apos;,isDone:true},{item:&amp;apos;dddd&amp;apos;,isDone:true}
        ]},{name:&amp;quot;Secondary&amp;quot;,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itmd #2&amp;apos;,isDone:true},{item:&amp;apos;Todo itmd #3&amp;apos;,isDone:true}
        ]}],filter:[{keyword:&amp;apos;&amp;apos;,Status:&amp;quot;SHOW_ALL&amp;quot;}],selectedCatelog:&amp;quot;0&amp;quot;};
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We create AddCatelog function and setSelectedCatalog function. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Here is the Add Catelog function 
AddCatelog: function(newCatalog){
    var Catalog = {name:newCatalog,items:[{item:&amp;apos;Todo itmd #1&amp;apos;,isDone:false}]};
    var newtodo = this.state.Todo.concat([Catalog]);
    this.setState({
        Todo: newtodo
    });
},
setSelectedCatalog: function(index){
    this.state.selectedCatelog = index;
    this.setState({
        selectedCatelog: index
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the meantime, we also need to modify updateItems function and deleteItem function. Updating Item or Deleting Item based on the selectedCatelog. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;updateItems: function(newItem){    
        var item = {item:newItem,isDone:false};
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.concat([item]);
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
    },
deleteItem : function(index){
        var newtodo = this.state.Todo;
        var allItems = this.state.Todo[this.state.selectedCatelog].items.slice(); //copy array
        allItems.splice(index, 1); //remove element
        newtodo[this.state.selectedCatelog].items = allItems;
        this.setState({
            Todo: newtodo
        });
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; At last, We insert ToDoCatalogForm Component and ToDoCatelog Component into render function and pass items based on selectedCatelog.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function(){
    return (
        &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-3&amp;quot;&amp;gt;
                &amp;lt;ToDoCatalogForm onFormSubmit = {this.AddCatelog} /&amp;gt;
                &amp;lt;ToDoCatelog selectedID = {this.state.selectedCatelog} onSelected={this.setSelectedCatalog} Todos = {this.state.Todo} /&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div className=&amp;quot;col-xs-6&amp;quot;&amp;gt;
                &amp;lt;ToDoBanner/&amp;gt;
                &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
                &amp;lt;ToDoForm onFormSubmit = {this.updateItems} /&amp;gt;
                &amp;lt;ToDoList  items = {this.state.Todo[this.state.selectedCatelog].items} filter = {this.state.filter} onDelete={this.deleteItem}/&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now have following screenshot&lt;br&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step5/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-4-Multiple-Todos&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (4) - Multiple Todos&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (4) - Multiple Todos&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step5.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;The next step will be the ability to add multiple todos. For example we might have a list that is used only for grocey lists, the other might be a list of planned blog posts or a list of the things to do todays. That’s why it’s important to have ability to sort the todos in different lists. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO CATELOG FORM
- TODO CATELOG
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(3)</title>
    <link href="https://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/"/>
    <id>https://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-3/</id>
    <published>2016-07-20T10:16:46.000Z</published>
    <updated>2016-07-21T02:03:55.505Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we have a lot of todos, it becomes difficult to search through them and to find a particular todo. It also becomes easier to see all the completed and incompleted tasks at once. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FILTER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Component-1-ToDo-Filter&quot;&gt;&lt;a href=&quot;#Component-1-ToDo-Filter&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - ToDo Filter&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - ToDo Filter&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;This component contains the filter and search bar.  Following is the code for Filter Component. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var ToDoFilter = React.createClass({
    isActive:function(value){
        return &amp;apos;btn &amp;apos;+((value===this.props.filter[0].Status) ?&amp;apos;btn-primary&amp;apos;:&amp;apos;default&amp;apos;);
    },
    render: function(){
        var onFilter1 = this.props.onFilter;
        var onSearch1 = this.props.onSearch;
        return(
                &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-7&amp;quot;&amp;gt;
                        &amp;lt;div id=&amp;quot;todo-filter&amp;quot; className=&amp;quot;input-group&amp;quot;&amp;gt;
                            &amp;lt;span className=&amp;quot;input-group-btn&amp;quot;&amp;gt;
                                &amp;lt;button className=&amp;quot;btn btn-default&amp;quot; type=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;span className=&amp;quot;glyphicon glyphicon-search&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/button&amp;gt;
                                &amp;lt;/span&amp;gt;
                                &amp;lt;input  type=&amp;quot;search&amp;quot; className=&amp;quot;form-control&amp;quot; ref=&amp;apos;filter&amp;apos; onChange={onSearch1} placeholder=&amp;quot;Search&amp;quot; &amp;gt;&amp;lt;/input&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div className=&amp;quot;col-xs-5&amp;quot;&amp;gt;
                        &amp;lt;ul className=&amp;quot;nav nav-pills todo-filter&amp;quot;&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;SHOW_ALL&amp;apos;)} value=&amp;quot;SHOW_ALL&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;All&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                            &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;false&amp;apos;)} value=&amp;quot;false&amp;quot;&amp;gt;Incomplete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                             &amp;lt;li&amp;gt;&amp;lt;a onClick={onFilter1} className={this.isActive(&amp;apos;true&amp;apos;)} value=&amp;quot;true&amp;quot;&amp;gt;Complete&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
                        &amp;lt;/ul&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
        ); 
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-ToDoApp&quot;&gt;&lt;a href=&quot;#Component-2-ToDoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - ToDoApp &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - ToDoApp &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;In ToDoApp, we create filterItem function and searchItem function to save input value and then add ToDoFilter into render function. &lt;/p&gt;
&lt;p&gt;Here’s the code :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;filterItem : function(e){
    this.state.filter[0].Status = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
searchItem : function(e){
    this.state.filter[0].keyword = e.target.value;
    this.setState({
        filter: this.state.filter
    });
},
render: function(){
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;ToDoBanner/&amp;gt;
            &amp;lt;ToDoFilter onFilter = {this.filterItem} onSearch = {this.searchItem} filter={this.state.filter}/&amp;gt;
            &amp;lt;ToDoForm onFormSubmit={this.updateItems} /&amp;gt;
            &amp;lt;ToDoList items={this.state.items} filter = {this.state.filter}  onDelete={this.deleteItem} /&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-ToDoList&quot;&gt;&lt;a href=&quot;#Component-3-ToDoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - ToDoList &quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - ToDoList &lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Filter the todo list based on user input. I use the filter Method to filter todo list. &lt;/p&gt;
&lt;p&gt;I use the indexOf() Method to implement Searching function. The indexOf() method return -1 if the keyword to search for never occurs. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;render: function() {    
    var createItem = function(itemText,i) {
        return (
            &amp;lt;ToDoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/ToDoListItem&amp;gt;
        );
    };
    // Here is the filter function 
    var allitems = this.props.items;

    var status = this.props.filter[0].Status;
    switch (status){
        case &amp;apos;false&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; !t.isDone)
         break;
         case &amp;apos;true&amp;apos;:
         allitems = allitems.filter(t =&amp;gt; t.isDone)
    };

    // Here is the search function 
    var queryText = this.props.filter[0].keyword;

    if(queryText){
        var queryResult=[];
        allitems.forEach(function(item){
            if(item.item.toLowerCase().indexOf(queryText)!=-1)
            queryResult.push(item);
        });
        return &amp;lt;ul&amp;gt;{queryResult.map(createItem,this)}&amp;lt;/ul&amp;gt;;
    }

    return &amp;lt;ul&amp;gt;{allitems.map(createItem,this)}&amp;lt;/ul&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now have following screenshot&lt;br&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step4/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-3-Adding-Filters-for-Search-and-showing-complete-incompleted-tasks&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (3) - Adding Filters for Search and showing complete/incompleted tasks&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step4.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we have a lot of todos, it becomes difficult to search through them and to find a particular todo. It also becomes easier to see all the completed and incompleted tasks at once. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FILTER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable(2)</title>
    <link href="https://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-2/"/>
    <id>https://kennethhutw.github.io/2016/07/20/React-js-todo-list-sortable-2/</id>
    <published>2016-07-20T10:10:39.000Z</published>
    <updated>2016-07-21T04:08:21.238Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this session, we are going to improve Component and remove item. When item is completed, the checkbox of item is marked. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Redeclare-Items&quot;&gt;&lt;a href=&quot;#Redeclare-Items&quot; class=&quot;headerlink&quot; title=&quot; Redeclare Items&quot;&gt;&lt;/a&gt;&lt;strong&gt; Redeclare Items&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;In order to add checkbox, we have to redeclare items and modify updateItems function. Each item in the array will have an item and a boolean Value whether that particular task is remaining or completed. The boolean value will bind to TodoListItem checkbox.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getInitialState : function(){
    return {items:[{item:&amp;apos;Todo itme #1&amp;apos;,isDone:false},{item:&amp;apos;Todo itme #2&amp;apos;,isDone:true}]};
},
updateItems: function(newItem){
    var item = {item:newItem,isDone:false};
    var allItems = this.state.items.concat([item]);
    this.setState({
        items: allItems
    });
},
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Improve-TodoListItem&quot;&gt;&lt;a href=&quot;#Improve-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Improve TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Improve TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We are going to add checkbox into TodoListItem and bind a event - changeHandler. In changeHandler, it will update the status of selected Item. When rendering component, it will see whether to apply style. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoListItem = React.createClass({
        changeHandler: function(e){
            this.setState({
              value: e.target.checked
            });
            this.props.children.isDone = e.target.checked;
        },
        render: function(){
            var _style = &amp;quot;line-through&amp;quot;;
            if(!this.props.children.isDone)
            _style =&amp;quot;none&amp;quot;;
            return (
              &amp;lt;li data-id={this.props.value} 
                        key={this.props.value}&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
            );
        }
    });
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you check or uncheck the checkbox, you will see how the underlying changes.&lt;/p&gt;
&lt;p&gt;You should now have following screenshot&lt;br&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step2/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
&lt;h1 id=&quot;Remove-TodoListItem&quot;&gt;&lt;a href=&quot;#Remove-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot; Remove TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt; Remove TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step3.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the session, we are going to learn how to bind a function to a component. We should be able to delete the old TodoListItem&lt;/p&gt;
&lt;p&gt;In TodoApp component, we create a deleteItem function and bind this function to TodoList component. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deleteItem : function(index){
            var newData = this.state.items.slice(); //copy array
            newData.splice(index, 1); //remove element
            this.setState({
                items: newData
            });
        },
render: function(){
            return (
                &amp;lt;div&amp;gt;
                    &amp;lt;ToDoBanner/&amp;gt;
                    &amp;lt;TodoForm onFormSubmit={this.updateItems} /&amp;gt;
                    &amp;lt;TodoList items={this.state.items} onDelete={this.deleteItem} /&amp;gt;
                &amp;lt;/div&amp;gt;
            );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In TodoList component, it also create the Remove function and bind that to TodoListITem. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var TodoList = React.createClass({
    Remove: function(e){
       this.props.onDelete(e);
    },
    render: function() {
        var createItem = function(itemText, i) {
        return (
                &amp;lt;TodoListItem key={i} value={i} onRemove = {this.Remove}&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt;
              );
          };
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem, this)}&amp;lt;/ul&amp;gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In TodoListItem component :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;It is to add Button into li element and also create a remove function to bind to this button. 

            RemoveHandler: function(){
                   this.props.onRemove(this.props.value);
            },
            render: function(){
                    var _style = &amp;quot;line-through&amp;quot;;
                    if(!this.props.children.isDone)
                    _style =&amp;quot;none&amp;quot;;
                    return (
                      &amp;lt;li data-id={this.props.value} 
                                key={this.props.value}&amp;gt;&amp;lt;button type=&amp;quot;button&amp;quot; className=&amp;quot;close pull-right&amp;quot; aria-hidden=&amp;quot;true&amp;quot; onClick={this.RemoveHndler}&amp;gt;&amp;amp;times;&amp;lt;/button&amp;gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; onChange={this.changeHandler} defaultChecked={this.props.children.isDone} /&amp;gt;&amp;lt;span style={{&quot;textDecoration&quot;: _style}}&amp;gt;{this.props.children.item}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
                    );
            }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should now have following screenshot&lt;br&gt;&lt;img src=&quot;/images/Step2.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step3/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js-2-Improve-Component-amp-Remove-Component&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&quot;&gt;&lt;/a&gt; Building a Todo app with React.js (2) - Improve Component &amp;amp; Remove Component&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/Step2.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this session, we are going to improve Component and remove item. When item is completed, the checkbox of item is marked. &lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>React-js-todo-list-sortable (1)</title>
    <link href="https://kennethhutw.github.io/2016/07/19/React-js-todo-list-sortable/"/>
    <id>https://kennethhutw.github.io/2016/07/19/React-js-todo-list-sortable/</id>
    <published>2016-07-19T04:38:43.000Z</published>
    <updated>2016-07-21T02:20:16.174Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;Lets start.You can follow the steps from the github repo for this tutorial.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;This is my first attempt with React-js to build a Todo App. React has gained massive traction as a JavaScript library for building user interfaces largely because it is built by Facebook. We’ll learn how.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;In this article, we’ll build an extremely an app using Facebook’s &lt;a href=&quot;https://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;react.js&lt;/a&gt;. If you are unfamiliar with this library, then I would strongly recommend reading the complete tutorial on building a &lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Comment system&lt;/a&gt; using React.&lt;/p&gt;
&lt;h1 id=&quot;Thinking-in-components&quot;&gt;&lt;a href=&quot;#Thinking-in-components&quot; class=&quot;headerlink&quot; title=&quot;Thinking in components&quot;&gt;&lt;/a&gt;&lt;strong&gt;Thinking in components&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;The fundamental way of building a React.js app is to break down your app into bunch of useful components and then work your way backwards to build them separately. Once the individual components are ready, we can wire them up to exchange data between the components. For instance, our Todo app can be decomposed into the following components and hierarchies,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- TODO APP
    - TODO BANNER
    - TODO FORM
    - TODO LIST
        - TODO LIST ITEM #1
        - TODO LIST ITEM #2
        ...
        - TODO LIST ITEM #n
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Basic-Skeleton&quot;&gt;&lt;a href=&quot;#Basic-Skeleton&quot; class=&quot;headerlink&quot; title=&quot;Basic Skeleton&quot;&gt;&lt;/a&gt;&lt;strong&gt;Basic Skeleton&lt;/strong&gt;&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ ... }); 
    /* [TODO BANNER] &amp;amp;&amp;amp; [TODO LIST] */ 
    var TodoBanner = React.createClass({ ... });
    /* [TODO FORM] */ 
    var TodoForm = React.createClass({ ... });                     
    var TodoList = React.createClass({ ... }); 
        /* [TODO LIST ITEM] */ 
        var TodoListItem = React.createClass({ ... }); 

React.render(&amp;lt;TodoApp/&amp;gt;, document.body);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-1-TodoApp&quot;&gt;&lt;a href=&quot;#Component-1-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Component 1 - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 1 - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;This component will hold a list of todo items that will be shared by its child components in various forms. The initial state of &lt;em&gt;items&lt;/em&gt; will be a blank list. The list will be updated as soon as a new item is added via the &lt;em&gt;TodoForm&lt;/em&gt; component.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO APP] */ 
var TodoApp = React.createClass({ 
    getInitialState: function(){ 
        return {items: []}; 
    }, 
    updateItems: function(newItem){ 
        var allItems = this.state.items.concat([newItem]); 
        this.setState({items: allItems});
    }, 
    render: function(){ 
        return ( 
            &amp;lt;div&amp;gt; 
                &amp;lt;TodoBanner/&amp;gt;
                &amp;lt;TodoForm onFormSubmit={this.updateItems}/&amp;gt;                                 
                &amp;lt;TodoList items={this.state.items}/&amp;gt;     
            &amp;lt;/div&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-2-TodoBanner&quot;&gt;&lt;a href=&quot;#Component-2-TodoBanner&quot; class=&quot;headerlink&quot; title=&quot;Component 2 - TodoBanner&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 2 - TodoBanner&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It simply contains a heading tag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO BANNER] */ 
var TodoBanner = React.createClass({ 
    render: function(){ 
        return ( 
        &amp;lt;h3&amp;gt;TODO....react.js&amp;lt;/h3&amp;gt; 
        ); 
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-3-TodoList&quot;&gt;&lt;a href=&quot;#Component-3-TodoList&quot; class=&quot;headerlink&quot; title=&quot;Component 3 - TodoList&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 3 - TodoList&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It accepts a list of items and wraps each item around a TodoListItem component. The final result is then wrapped with &amp;lt;ul&amp;gt; tag.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LIST] */ 
var TodoList = React.createClass({ 
    render: function() { 
    var createItem = function(itemText) { 
        return ( 
            &amp;lt;TodoListItem&amp;gt;{itemText}&amp;lt;/TodoListItem&amp;gt; 
            );
        }; 
        return &amp;lt;ul&amp;gt;{this.props.items.map(createItem)}&amp;lt;/ul&amp;gt;;
    } 
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-4-TodoListItem&quot;&gt;&lt;a href=&quot;#Component-4-TodoListItem&quot; class=&quot;headerlink&quot; title=&quot;Component 4 - TodoListItem&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 4 - TodoListItem&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It wraps list elements with &amp;lt;li&amp;gt; so that it renders as a list block in the final HTML. this.props.children predictably contains all the descendents passed to the TodoListItem tag from its parent component.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO LISTITEM] */
var TodoListItem = React.createClass({
    render: function(){
        return (
            &amp;lt;li data-id={this.props.value} key={this.props.value}&amp;gt;{this.props.children}&amp;lt;/li&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Component-5-TodoForm&quot;&gt;&lt;a href=&quot;#Component-5-TodoForm&quot; class=&quot;headerlink&quot; title=&quot;Component 5 - TodoForm&quot;&gt;&lt;/a&gt;&lt;strong&gt;Component 5 - TodoForm&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;It contains a text field followed by a button to trigger the addition of item in the Todo list. This component will hold the current item entered in the textfield and both of them are kept in sync using the onChange event. As soon as the submit button is pressed, the item is passed to its parent component and the focus is returned back to the textfield.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/* [TODO FORM] */
var TodoForm = React.createClass({
    getInitialState: function() {
        return {item: &amp;apos;&amp;apos;};
    },
    handleSubmit: function(e){
        e.preventDefault();
        this.props.onFormSubmit(this.state.item);
        this.setState({item: &amp;apos;&amp;apos;});
        ReactDOM.findDOMNode(this.refs.item).focus();
        return;
    },
    onChange: function(e){
        this.setState({
            item: e.target.value
        });
    },
    render: function(){
        return (
            &amp;lt;div className=&amp;quot;row&amp;quot;&amp;gt;
              &amp;lt;form  onSubmit={this.handleSubmit}&amp;gt;
                &amp;lt;div className=&amp;quot;form-group col-sm-10&amp;quot;&amp;gt;
                    &amp;lt;input type=&amp;apos;text&amp;apos; className=&amp;quot;todoField form-control&amp;quot;  ref=&amp;apos;item&amp;apos; onChange={this.onChange} value={this.state.item}/&amp;gt;
                    &amp;lt;input type=&amp;apos;submit&amp;apos; className=&amp;quot;btn btn-default&amp;quot; style={{&quot;float&quot;:&quot;left&quot;,&quot;marginLeft&quot;:&quot;5px&quot;}} value=&amp;apos;Add&amp;apos;/&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
        );
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;Render-TodoApp&quot;&gt;&lt;a href=&quot;#Render-TodoApp&quot; class=&quot;headerlink&quot; title=&quot;Render - TodoApp&quot;&gt;&lt;/a&gt;&lt;strong&gt;Render - TodoApp&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;The last step is to render TodoApp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReactDOM.render(
        &amp;lt;TodoApp/&amp;gt;,
        document.getElementById(&amp;apos;todo&amp;apos;)
      );
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you finish , you can see the TodoApp.&lt;br&gt;&lt;img src=&quot;/images/Step1.gif&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;The complete working &lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step1/index&quot;&gt;demo&lt;/a&gt; can be found here .&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Building-a-Todo-app-with-React-js&quot;&gt;&lt;a href=&quot;#Building-a-Todo-app-with-React-js&quot; class=&quot;headerlink&quot; title=&quot; Building a Todo app with React.js&quot;&gt;&lt;/a&gt; Building a Todo app with React.js&lt;/h1&gt;&lt;p&gt;Lets start.You can follow the steps from the github repo for this tutorial.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;##&lt;a href=&quot;http://kennethhutw.github.io/demo/ReactJs/Step6/index&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/master.zip&quot;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;##&lt;a href=&quot;https://github.com/kennethhutw/React-js-todolist/archive/practice.zip&quot;&gt;Practice&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/images/ToDoList.png&quot; alt=&quot;TodoListApp&quot;&gt;&lt;br&gt;This is my first attempt with React-js to build a Todo App. React has gained massive traction as a JavaScript library for building user interfaces largely because it is built by Facebook. We’ll learn how.&lt;/p&gt;
    
    </summary>
    
      <category term="React-js" scheme="https://kennethhutw.github.io/categories/React-js/"/>
    
    
      <category term="React-js" scheme="https://kennethhutw.github.io/tags/React-js/"/>
    
  </entry>
  
  <entry>
    <title>Do-You-Take-Yourself-Seriously</title>
    <link href="https://kennethhutw.github.io/2016/06/21/Do-You-Take-Yourself-Seriously/"/>
    <id>https://kennethhutw.github.io/2016/06/21/Do-You-Take-Yourself-Seriously/</id>
    <published>2016-06-21T07:16:15.000Z</published>
    <updated>2016-06-24T10:27:44.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;o-You-Take-Yourself-Seriously&quot;&gt;&lt;a href=&quot;#o-You-Take-Yourself-Seriously&quot; class=&quot;headerlink&quot; title=&quot;o You Take Yourself Seriously?&quot;&gt;&lt;/a&gt;o You Take Yourself Seriously?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;原文链接&lt;/em&gt; &lt;em&gt;: &lt;a href=&quot;https://medium.com/@sarahcpr/do-you-take-yourself-seriously-704418a5f614#.4n5t44wos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Do You Take Yourself Seriously?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;原文作者&lt;/em&gt; &lt;em&gt;: &lt;a href=&quot;https://medium.com/@sarahcpr?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sarah Cooper&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;译者&lt;/em&gt; &lt;em&gt;: &lt;a href=&quot;http://kennethhutw.github.io/&quot;&gt;Kenneth&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;作者授权翻译&lt;/em&gt; &lt;em&gt;: Translated with the permission from the author, &lt;a href=&quot;https://medium.com/@sarahcpr?source=post_header_lockup&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sarah Cooper&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do You Take Yourself Seriously?&lt;/p&gt;
&lt;p&gt;你有认真的对待自己嗎？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;When is the last time you had an opinion but didn’t share it with anyone because you didn’t think anyone would care? When is the last time you got really excited about an idea you had but then never pursued it because you decided it wasn’t good enough? When is the last time you started to make something but gave up before you finished because you didn’t think anyone would like it?&lt;/p&gt;
&lt;p&gt;何时是最近一次你有了自己的看法，但却没有分享给任何一个人，因为你觉得别人不会在乎，是什么时候？你最近一次你对自己的想法感到特别兴奋，但是从未追求过它因为你觉得还并不够好，是什么时候？你最近一次开始决定做一些事情但是在结束前放弃了因为你觉得没有人会喜欢，是什么时候？&lt;/p&gt;
&lt;p&gt;You’ll read a lot of articles that tell you to “just do it,” — don’t worry what others will think, keep going, keep persevering, don’t give up!&lt;/p&gt;
&lt;p&gt;你将会读过成千上万本书告诉你 “just do it”-不要管别人怎么想，继续向前，继续坚持，永不放弃！&lt;/p&gt;
&lt;p&gt;But if you don’t take yourself seriously you’ll never be able to take any of that advice. Because you’ll always be able to convince yourself that what you’re doing isn’t important enough.&lt;/p&gt;
&lt;p&gt;但是如果你不认真的看待你自己，这些建议将毫无用处。因为你将永远的告诉你自己你在做的事情从来都不够重要。&lt;/p&gt;
&lt;p&gt;I didn’t take myself seriously for a long time. I still struggle with taking myself seriously. I couldn’t even put a finger on what it was I was doing to myself until about a year ago. But finally I realized there’s this thing some people have — this ability to get excited about something they’re doing and go for it with some sort of crazy abandon. This ability to remain focused and stand firm and get on top of a mountain and shout out what they want for all to hear (so to speak).&lt;/p&gt;
&lt;p&gt;我已经很久没有认真的对待自己。我仍然努力的试着认真的对待自己。大约一年以前吧，我甚至说不上来我对自己做什么。但是终于，察觉到有一些是别人拥有的能力 ———— 对自己做的事情感到兴奋，并且用一种近乎疯狂追求的态度，努力实现它的能力。这种能力能保持专注，能让你立场坚定，能让你登上高峰将自己的梦想大声的喊出来让所有人都听见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*uimz1ZNACoY-dOXODA7t4g.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;And I knew I had the ability to climb up a mountain and do the same thing, but I would always talk myself out of it. And I finally realized it was because I just didn’t take myself seriously.&lt;/p&gt;
&lt;p&gt;并且我知道我有能力登上高峰和做同样酷炫事情，但是我却一直告诉自己我是不行的。最后我发现这是因为我没有认真的对待我自己。&lt;/p&gt;
&lt;p&gt;I even struggled writing this article…&lt;/p&gt;
&lt;p&gt;我甚至挣扎的写下这段话…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why am I writing this? This is stupid. This is repetitive. Hasn’t someone else said this before but better? Do I even know what I’m trying to say? No one is going to read this. I should go work on something else. This is a waste of time.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我为什么在写这些？这很蠢，这是重复无意义的，难道之前没有人说过比这更好的吗？我知道我要说什麽吗?？没有人会读这篇文章。我应该去干点别的事情。这真是浪费时间。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Those were my thoughts almost every time I tried to create something new. I didn’t take my own opinions, my ideas or even what I wanted for my life seriously.&lt;/p&gt;
&lt;p&gt;每当我试着创造一些新东西时，这些想法就充斥着我的大脑。我没有正视自己的意见，自己的想法甚至是自己对生活的期望。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what happens when you don’t take yourself seriously?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不重视自己会如何呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You spend a lot of time dreaming but not actually doing. You come up with ideas but you stop yourself before you even try.&lt;/p&gt;
&lt;p&gt;你花费大量时间幻想做白日夢但从来不付出实际行动。你有很多想法但却从来试都没有去试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*R55eIeIg2uJ2hYb5U6n0Mw.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Or you do try something but you give up quickly because you decide it’s not good enough, no one will like it, and it was a stupid idea anyway.&lt;/p&gt;
&lt;p&gt;或者是你尝试着做一些事情但是马上就放弃了就因为你觉得这还远远不够好，没有人会喜欢它，或者是这是一个愚蠢的想法等等。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But the worst part happens ten years later&lt;/em&gt; when you look back on that thing you almost started and you realize there was something there. It wasn’t half as bad as what you thought at the time and you might have really accomplished something if you’d only stuck with it.&lt;/p&gt;
&lt;p&gt;但是最可怕的事情是十年之后，当你回想起当初，你的想法几乎已经开始，并且意识到这个想法是可行的。其实当时的情况完全没有你想象的那么糟，你需要做的就是努力的坚持下来完成你想做的事情。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what happens when you don’t take yourself seriously?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不重视自己会如何呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You’ll eventually see someone else who had the same idea you had, but she shared it with the world, she did something with it.&lt;/p&gt;
&lt;p&gt;你最终会看到一个人和你拥有同样的想法，但是他将这个想法和世界分享，并且做了一些事情。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*2rm7GD0EDzH4fRZZ345TTw.gif&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;“But it was the exact same idea!” you say. Yes, it was — but that person took it seriously. That person took themselves seriously. That person said, “this is interesting to me, so it could be interesting to someone else,” and they did something with it.&lt;/p&gt;
&lt;p&gt;“但是这完全是一样的想法！”你说。没错，是的，但是那个人视这个想法为珍宝，那个人重视自己所有的想法，那个人说 “这对我来说十分有趣，所以它应该也能吸引到别人” 然后朝着这个方向努力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what happens when you don’t take yourself seriously?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不重视自己会如何呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You resent people who do. You look at people who promote themselves and their ideas and you think they’re egotistical or ridiculous. Or you look at people who you admire and you lament the fact that you could never ever accomplish what they have.&lt;/p&gt;
&lt;p&gt;你会愤恨那些重视自己的人。你看着那些提升自己能力和想法的人们然后觉得他们的想法是自以为是的荒唐。或者是你将看着那些你崇拜的人并且哀叹自己永远不能达到和他们同样地位的事实。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what happens when you don’t take yourself seriously?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不重视自己会如何呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You sabotage yourself. You rush through a half-hearted execution and don’t give yourself the time you need to learn something new, or do it the right way. And when it doesn’t turn out the way you wanted you decide it was a total waste of time. But you might have had a totally different outcome if you’d first accepted the fact that it might take time but that the time would be worth it because you believed in it.&lt;/p&gt;
&lt;p&gt;你将摧毁你自己。你半心半意的匆匆执行，不给自己学习新知识或是认真做事的时间。当事情最终没有按照你的预期发展时你就觉得这完全是在浪费时间。但是如果在一开始你就接受这个並花时间去做或学习，你也许会有一个完全不同的结果，因为你相信它，这一切都是值得的！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what happens when you don’t take yourself seriously?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不重视自己会如何呢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You get depressed. You get angry at yourself. You get disappointed in yourself. You wonder why you haven’t done anything. You feel like you never will. You feel like it’s too late. But it’s not.&lt;/p&gt;
&lt;p&gt;你将变得抑郁。你将对自己生气。你将对自己失望。你会问自己为什么自己什么事都做不好，你觉得自己永远都不能做好，你觉得一切都太晚了，但并不是。&lt;/p&gt;
&lt;p&gt;Every piece of every tiny little thing you’ve ever thought is filled with possibilities. You don’t know what. And that’s scary. You might not yet know how. And that’s hard. But when you take yourself seriously, you give yourself enough credit to know that you can figure it out. When you know in your heart that you and your ideas are important, you will give every idea you have a fighting chance.&lt;/p&gt;
&lt;p&gt;你曾经的每一件细微的思想都充满了无限可能性。但是你没有发现这点，这是很可怕的，你可能还不知道会如何，这是困难的。但是当你重视你自己，给予自己足够的信任来认识到自己是能解决问题的。这是十分重要的当从内心认识到自己和自己的想法，你将会给予每一个想法一个奋斗的机会！&lt;/p&gt;
&lt;p&gt;That might mean speaking up at work. Or it might mean just finishing that one thing you’ve been thinking about forever. Or it might mean tweeting about it, making a video or blog post about it, or getting on a stage and sharing it with an audience.&lt;/p&gt;
&lt;p&gt;这也许可能是着在工作中将你的想法说出来，或许可能是仅仅去完成一件你将会一直思考的事情，或许可能是在tweet上发布这个想法，制作一个视频或是在博客中记录它，或者是在一个讲台上将这个想法分享给听众。&lt;/p&gt;
&lt;p&gt;When you take yourself seriously you will make others take you seriously. You will put your ideas out there. You won’t hide them. You won’t delete them. You will keep trying.&lt;/p&gt;
&lt;p&gt;当你认真重视自己的时候，别人也将认真的看待你。你将会把你的想法放在那裡，不会将它们隐藏，你不会将它们删除，你将会坚持尝试任何新的事物。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Take yourself seriously.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请认真的重视你自己&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don’t treat your ideas like they’re nothing, don’t treat yourself like you’re nothing, because you and your ideas are important and meaningful and have the potential to become so much more than you realize.&lt;/p&gt;
&lt;p&gt;请别轻视自己的想法，更别轻视自己，因为你和你的想法是如此的重要和有意义，它们的潜力将远超你的想象。&lt;/p&gt;
&lt;p&gt;TRUST ME…&lt;/p&gt;
&lt;p&gt;请相信我！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;o-You-Take-Yourself-Seriously&quot;&gt;&lt;a href=&quot;#o-You-Take-Yourself-Seriously&quot; class=&quot;headerlink&quot; title=&quot;o You Take Yourself Seriously?&quot;&gt;&lt;/a&gt;o You Take Yourself Seriously?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;原文链接&lt;/em&gt; &lt;em&gt;: &lt;a href=&quot;https://medium.com/@sarahcpr/do-you-take-yourself-seriously-704418a5f614#.4n5t44wos&quot;&gt;Do You Take Yourself Seriously?&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;原文作者&lt;/em&gt; &lt;em&gt;: &lt;a href=&quot;https://medium.com/@sarahcpr?source=post_header_lockup&quot;&gt;Sarah Cooper&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;译者&lt;/em&gt; &lt;em&gt;: &lt;a href=&quot;http://kennethhutw.github.io/&quot;&gt;Kenneth&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;作者授权翻译&lt;/em&gt; &lt;em&gt;: Translated with the permission from the author, &lt;a href=&quot;https://medium.com/@sarahcpr?source=post_header_lockup&quot;&gt;Sarah Cooper&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do You Take Yourself Seriously?&lt;/p&gt;
&lt;p&gt;你有认真的对待自己嗎？&lt;/p&gt;
    
    </summary>
    
      <category term="encourage" scheme="https://kennethhutw.github.io/categories/encourage/"/>
    
    
      <category term="encourage" scheme="https://kennethhutw.github.io/tags/encourage/"/>
    
  </entry>
  
  <entry>
    <title>DISQUS</title>
    <link href="https://kennethhutw.github.io/2016/06/14/DISQUS/"/>
    <id>https://kennethhutw.github.io/2016/06/14/DISQUS/</id>
    <published>2016-06-14T06:10:03.000Z</published>
    <updated>2016-06-23T03:02:26.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://disqus-cloudfront.s3.amazonaws.com/docs/ERM-hide-media.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;多说-DISQUS&quot;&gt;&lt;a href=&quot;#多说-DISQUS&quot; class=&quot;headerlink&quot; title=&quot;多说 DISQUS&quot;&gt;&lt;/a&gt;多说 DISQUS&lt;/h2&gt;&lt;p&gt;Disqus是一家第三方社会化评论系统，主要为网站主提供评论托管服务。Disqus由Danniel Ha于2007年5月5日创办，和Dropbox、Reddit等知名网站一样，是Y Combinator孵化的一家公司。创办至今已获得Y-Combinator、Union Square Ventures、North Bridge等投资机构共计1450万美元投资。&lt;br&gt;当前有80万家第三方网站在使用Disqus提供的第三方评论系统，其评论系统每月的独立用户访问量已接近5亿，这一数字较2010年增长了500%。包括CNN、NBC、Fox News、Engadget、Time等知名网站均使用了Disqus提供的社会化评论系统。WordPress、Blogger、Tumblr等第三方博客平台均提供了Disqus第三方评论插件，目前，第三方社会化评论系统在美国，基本是主流网站的标配。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;添加 Disqus 第三方评论系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NexT 主题为多说提供了一套自定义的样式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Disqus&lt;/p&gt;
&lt;h2 id=&quot;使用-Disqus&quot;&gt;&lt;a href=&quot;#使用-Disqus&quot; class=&quot;headerlink&quot; title=&quot;使用 Disqus&quot;&gt;&lt;/a&gt;使用 &lt;a href=&quot;https://disqus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用Disqus前需要先在 &lt;a href=&quot;https://disqus.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Disqus&lt;/a&gt;  注册：&lt;br&gt;注册好后可以直接&lt;/p&gt;
&lt;p&gt;如果你没有使用Next themes,你要手动加入代码，Disqus裡有说明。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://disqus.com/admin/install/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://disqus.com/admin/install/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Next theme 下&lt;/p&gt;
&lt;p&gt;编辑&lt;strong&gt;站点&lt;/strong&gt;的 &lt;code&gt;_config.yml&lt;/code&gt; ，添加 &lt;code&gt;disqus_shortname&lt;/code&gt; 字段，设置如下&lt;br&gt;E.g : hexo\themes\next_config.yml &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;disqus_shortname: your-disqus-shortname&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; # Disqus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    disqus_shortname: kennethhutw&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;取消某个页面的评论，在md文件的front-matter中增加&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;comments: false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://disqus-cloudfront.s3.amazonaws.com/docs/ERM-hide-media.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;多说-DISQUS&quot;&gt;&lt;a href=&quot;#多说-DISQUS&quot; class=&quot;headerlink&quot; title=&quot;多说 DISQUS&quot;&gt;&lt;/a&gt;多说 DISQUS&lt;/h2&gt;&lt;p&gt;Disqus是一家第三方社会化评论系统，主要为网站主提供评论托管服务。Disqus由Danniel Ha于2007年5月5日创办，和Dropbox、Reddit等知名网站一样，是Y Combinator孵化的一家公司。创办至今已获得Y-Combinator、Union Square Ventures、North Bridge等投资机构共计1450万美元投资。&lt;br&gt;当前有80万家第三方网站在使用Disqus提供的第三方评论系统，其评论系统每月的独立用户访问量已接近5亿，这一数字较2010年增长了500%。包括CNN、NBC、Fox News、Engadget、Time等知名网站均使用了Disqus提供的社会化评论系统。WordPress、Blogger、Tumblr等第三方博客平台均提供了Disqus第三方评论插件，目前，第三方社会化评论系统在美国，基本是主流网站的标配。&lt;/p&gt;
    
    </summary>
    
      <category term="disqus" scheme="https://kennethhutw.github.io/categories/disqus/"/>
    
    
      <category term="disqus" scheme="https://kennethhutw.github.io/tags/disqus/"/>
    
  </entry>
  
  <entry>
    <title>2016_5_1_myholiday</title>
    <link href="https://kennethhutw.github.io/2016/05/30/2016-5-1-myholiday/"/>
    <id>https://kennethhutw.github.io/2016/05/30/2016-5-1-myholiday/</id>
    <published>2016-05-30T01:32:39.000Z</published>
    <updated>2016-05-30T04:10:12.000Z</updated>
    
    <content type="html">&lt;p&gt;I made a trip in Kunming. I use leaflet to record where I have been during this trip. &lt;/p&gt;
&lt;p&gt;You click any item in right bar. It will take you to the location of item. &lt;/p&gt;
&lt;p&gt;You also can click the marker. It will show photo and some description on the left bar. &lt;/p&gt;
&lt;p&gt;If you cannot see the map, you can change it to qq map. &lt;/p&gt;
&lt;p&gt;If you have any idea or suggestion, please let me know. &lt;/p&gt;
&lt;p&gt;Hope you also have a good 2016_5_1_holiday as me. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kennethhutw.github.io/51Holiday/examples/51holiday.html&quot;&gt;http://kennethhutw.github.io/51Holiday/examples/51holiday.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kennethhutw.github.io/51Holiday/examples/51holiday.html&quot;&gt;My 2016_5_1_holiday &lt;/a&gt;! &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I made a trip in Kunming. I use leaflet to record where I have been during this trip. &lt;/p&gt;
&lt;p&gt;You click any item in right bar. It will ta
    
    </summary>
    
      <category term="leaflet" scheme="https://kennethhutw.github.io/categories/leaflet/"/>
    
    
      <category term="leaflet" scheme="https://kennethhutw.github.io/tags/leaflet/"/>
    
  </entry>
  
  <entry>
    <title>WebFrontEndStack_hit_rate</title>
    <link href="https://kennethhutw.github.io/2016/05/26/WebFrontEndStack-hit-rate/"/>
    <id>https://kennethhutw.github.io/2016/05/26/WebFrontEndStack-hit-rate/</id>
    <published>2016-05-26T01:32:39.000Z</published>
    <updated>2016-06-21T07:49:58.000Z</updated>
    
    <content type="html">&lt;p&gt;I have post my WebFrontEndStack page in a forum. &lt;/p&gt;
&lt;p&gt;I record how many visitor come to my page and I use echarts to make a report as a practice. &lt;/p&gt;
&lt;p&gt;I use two type of echarts in this report. &lt;/p&gt;
&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://kennethhutw.github.io/WebFrontEndStack/2016-06-21_154455.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kennethhutw.github.io/WebFrontEndStack/front_end_report.html&quot;&gt;Hit_rate_report&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I have post my WebFrontEndStack page in a forum. &lt;/p&gt;
&lt;p&gt;I record how many visitor come to my page and I use echarts to make a report as 
    
    </summary>
    
      <category term="echarts" scheme="https://kennethhutw.github.io/categories/echarts/"/>
    
    
      <category term="echarts" scheme="https://kennethhutw.github.io/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://kennethhutw.github.io/2016/05/23/hello-world/"/>
    <id>https://kennethhutw.github.io/2016/05/23/hello-world/</id>
    <published>2016-05-23T08:05:10.492Z</published>
    <updated>2016-05-23T08:05:12.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>name</title>
    <link href="https://kennethhutw.github.io/2016/04/06/ggg/"/>
    <id>https://kennethhutw.github.io/2016/04/06/ggg/</id>
    <published>2016-04-06T02:34:21.000Z</published>
    <updated>2016-06-14T07:24:08.000Z</updated>
    
    <content type="html">&lt;p&gt;Hello world，Test！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Hello world，Test！！&lt;/p&gt;

    
    </summary>
    
      <category term="Daily" scheme="https://kennethhutw.github.io/categories/Daily/"/>
    
    
      <category term="Begin" scheme="https://kennethhutw.github.io/tags/Begin/"/>
    
      <category term="Daily" scheme="https://kennethhutw.github.io/tags/Daily/"/>
    
  </entry>
  
  <entry>
    <title>leaflet_baidu</title>
    <link href="https://kennethhutw.github.io/2016/03/30/leaflet-baidu/"/>
    <id>https://kennethhutw.github.io/2016/03/30/leaflet-baidu/</id>
    <published>2016-03-30T01:32:06.000Z</published>
    <updated>2016-05-30T04:06:20.000Z</updated>
    
    <content type="html">&lt;p&gt;This is a plugin to use baidu map tiles with leaflet.  &lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var map = L.map(&amp;#39;container&amp;#39;);
    map.setView([39.916527,116.397128], 11);
    var qqLayer = new L.BMap();
    map.addLayer(qqLayer);&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://kennethhutw.github.io/leaflet_baidu/leaflet-baidu.html&quot;&gt;http://kennethhutw.github.io/leaflet_baidu/leaflet-baidu.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This is a plugin to use baidu map tiles with leaflet.  &lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h
    
    </summary>
    
      <category term="leaflet" scheme="https://kennethhutw.github.io/categories/leaflet/"/>
    
    
      <category term="leaflet" scheme="https://kennethhutw.github.io/tags/leaflet/"/>
    
      <category term="qq map" scheme="https://kennethhutw.github.io/tags/qq-map/"/>
    
      <category term="map" scheme="https://kennethhutw.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>leaflet_qq</title>
    <link href="https://kennethhutw.github.io/2016/02/20/leaflet-qq/"/>
    <id>https://kennethhutw.github.io/2016/02/20/leaflet-qq/</id>
    <published>2016-02-20T01:32:06.000Z</published>
    <updated>2016-05-30T04:06:46.000Z</updated>
    
    <content type="html">&lt;p&gt;This is a plugin to use qq map tiles with leaflet.  &lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var map = L.map(&amp;#39;container&amp;#39;);
    map.setView([39.916527,116.397128], 11);
    var qqLayer = new L.qq();
      map.addLayer(qqLayer);&lt;/code&gt; .&lt;/p&gt;
&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://kennethhutw.github.io/leaflet_qq/leaflet-qq.html&quot;&gt;http://kennethhutw.github.io/leaflet_qq/leaflet-qq.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;This is a plugin to use qq map tiles with leaflet.  &lt;/p&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="leaflet" scheme="https://kennethhutw.github.io/categories/leaflet/"/>
    
    
      <category term="leaflet" scheme="https://kennethhutw.github.io/tags/leaflet/"/>
    
      <category term="qq map" scheme="https://kennethhutw.github.io/tags/qq-map/"/>
    
      <category term="map" scheme="https://kennethhutw.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>WebFrontEndStack</title>
    <link href="https://kennethhutw.github.io/2016/01/30/WebFrontEndStack/"/>
    <id>https://kennethhutw.github.io/2016/01/30/WebFrontEndStack/</id>
    <published>2016-01-30T01:32:06.000Z</published>
    <updated>2016-05-30T04:12:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Web front-end stack: browsers, platforms, libraries, frameworks, tools etc.&lt;/p&gt;
&lt;p&gt;It shows the web front end technology stack and It has English and Chinese version. &lt;/p&gt;
&lt;p&gt;You can use mouse to move/zoom in/zoom out. some of them has link to see the detail. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://kennethhutw.github.io/WebFrontEndStack/WebFrontEndStack.html&quot;&gt;http://kennethhutw.github.io/WebFrontEndStack/WebFrontEndStack.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Web front-end stack: browsers, platforms, libraries, frameworks, tools etc.&lt;/p&gt;
&lt;p&gt;It shows the web front end technology stack and It has
    
    </summary>
    
      <category term="d3" scheme="https://kennethhutw.github.io/categories/d3/"/>
    
    
      <category term="d3" scheme="https://kennethhutw.github.io/tags/d3/"/>
    
  </entry>
  
</feed>
